/**
 * Class {@code Random} allows the generation of pseudorandom numbers using
 * the Mersenne Twister algorithm.  This implementation is based on Sean
 * Luke's Java implementation of version MT199937(99/10/29) of the Mersenne
 * Twister algorithm with the initialization improved using the new 2002/1/26
 * initialization algorithm.
 * 
 * @seeUrl https://cs.gmu.edu/~sean/research/mersenne/MersenneTwister.java Sean Luke's Java implementation
 * @seeUrl http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html The Mersenne Twister Home Page   
 */
 
 /* 
 * <h3>License</h3>
 *
 * Copyright (c) 2003 by Sean Luke. <br>
 * Portions copyright (c) 1993 by Michael Lecuyer. <br>
 * All rights reserved. <br>
 *
 * <p>Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * <ul>
 * <li> Redistributions of source code must retain the above copyright notice, 
 * this list of conditions and the following disclaimer.
 * <li> Redistributions in binary form must reproduce the above copyright notice, 
 * this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * <li> Neither the name of the copyright owners, their employers, nor the 
 * names of its contributors may be used to endorse or promote products 
 * derived from this software without specific prior written permission.
 * </ul>
 * <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNERS OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 */
class shadow:utility@
	Random
is  CanEqual<Random>
{

	/**
	 * Creates a {@code Random} object using the nanoseconds since the Unix
	 * Epoch as a seed.
	 */
	public create()	
	{
		this(System.nanoTime());
	}
	
	/**
	 * Creates a {@code Random} object using the given value as a seed.
	 * @param seed seed for pseudorandom number generation	 
	 */
	public create( long seed )
	{
		this->seed = seed;
	}
	
	/**
	 * Creates a {@code Random} object using an array of values as a seed.
	 * @param array seed for pseudorandom number generation	 
	 */	
	public create( uint[] array )
	{		
		this->seed = array;
	}

     // Period parameters
    private constant int N = 624;
    private constant int M = 397;
    private constant uint MATRIX_A = 0x9908b0dfu;   
    private constant uint UPPER_MASK = 0x80000000u;
    private constant uint LOWER_MASK = 0x7fffffffu;

    // Tempering parameters
    private constant uint TEMPERING_MASK_B = 0x9d2c5680u;
    private constant uint TEMPERING_MASK_C = 0xefc60000u;
    
    uint[] mt; 		// the array for the state vector
    int mti; 		// mti == N+1 means mt[N] is not initialized
    uint[] mag01;

    double nextNextGaussian = 0.0;
    boolean haveNextNextGaussian = false;
   
   	/**
	 * Checks if the current {@code Random} object has the same state as
	 * another {@code Random} object.
	 * @param other object to compare to	 
	 * @return {@code true} if the two objects have the same state
	 */
    public readonly equal(Random other) => (boolean)
	{
        if (other === this)
        	return true;        
        if (mti != other:mti)
        	return false;
        for(int x=0;x < mag01->size; x+=1)
            if (mag01[x] != other:mag01[x])
            	return false;
        for(int x=0;x<mt->size;x+=1)
            if (mt[x] != other:mt[x])
            	return false;
        return true;
	}

   
    /**
     * Initalizes the pseudorandom number generator with the given seed value.
     * The algorithm is only intended to use a 32-bit seed, so the two halves
     * of the 64-bit seed value are XORed together to capture bits from both.        
     * @param seed seed for pseudorandom number generation
     */
    public set seed(long seed) => ()
     {     
        haveNextNextGaussian = false;

        mt = uint:create[N];
        
        mag01 = uint:create[2];
        mag01[0] = 0x0u;
        mag01[1] = MATRIX_A;
       
        mt[0] = cast<uint>(seed ^ (seed >> 32));
        for (mti=1; mti<N; mti+= 1) 
        {           
            mt[mti] = 1812433253u * (mt[mti - 1] ^ (mt[mti - 1] >> 30)) + cast<uint>(mti);
            /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
            /* In the previous versions, MSBs of the seed affect   */
            /* only MSBs of the array mt[].                        */
            /* 2002/01/09 modified by Makoto Matsumoto             */
            // mt[mti] &= 0xffffffff;
            /* for >32 bit machines */
		}
	}

	/**
     * Initalizes the pseudorandom number generator with the given array of
     * values.  The array must have a non-zero length. Only the first 624
     * values in the array are used. If the array has a shorter length, its
     * values are used repeatedly in a wrap-around fashion.             
     * @param array seed for pseudorandom number generation
     */
    public set seed(uint[] array) => ()
	{		
        if (array->size == 0)
            throw IllegalArgumentException:create("Array length must be greater than zero");
        int i, j, k;
        this->seed = 19650218L;
        i=1; j=0;
        k = (N>array->size ? N , array->size);        
        for (; k!=0; k -= 1) 
        {            
			mt[i] = (mt[i] ^ (( mt[i-1] ^ ( mt[i-1] >> 30 )) * 1664525u)) + cast<uint>(array[j] + j); /* non linear */
            // mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
            i+= 1;
            j+= 1;
            if (i>=N) { mt[0] = mt[N-1]; i=1; }
            if (j>=array->size) j=0;
        }
        for (k=N-1; k!=0; k -= 1) 
        {
            mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941u)) - cast<uint>(i); /* non linear */
            // mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
            i+= 1;
            if (i>=N) 
            {
                mt[0] = mt[N-1]; i=1; 
            }
		}
        mt[0] = 0x80000000u; /* MSB is 1; assuring non-zero initial array */
	}

    /**
     * Produces an integer with the given number of bits filled with
     * pseudorandom values.
     * @param bits number of random bits to generate
     * @return pseudorandom {@code int} value
     */
    protected next(int bits) => (int)
    {
        uint y;
        
        if (mti >= N)   // generate N words at one time
        {
            int kk;
            uint[] mt = this:mt; // locals are slightly faster 
            uint[] mag01 = this:mag01; // locals are slightly faster 
            
            for (kk = 0; kk < N - M; kk+= 1)
            {
                y = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
                mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
            }
            for (; kk < N-1; kk+= 1)
			{
                y = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
                mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
			}
            y = (mt[N-1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
            mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];

            mti = 0;
        }
  
  		
        y = mt[mti];
        mti += 1;
        y ^= y >> 11;                          	// TEMPERING_SHIFT_U(y)
        y ^= (y << 7) & TEMPERING_MASK_B;       // TEMPERING_SHIFT_S(y)
        y ^= (y << 15) & TEMPERING_MASK_C;      // TEMPERING_SHIFT_T(y)
        y ^= (y >> 18);                        	// TEMPERING_SHIFT_L(y)

        return cast<int>(y >> (32 - bits));
    }
    
    /**
     * Produces a pseudorandom {@code boolean} value with even chances of
     * {@code true} and {@code false}.
     * @return pseudorandom {@code boolean} value
     */
    public nextBoolean() => (boolean)
    {
    	return next(1) != 0;
    }

    /**
     * Produces a pseudorandom {@code boolean} value with the specified probability
     * of it being {@code true}.
     * @param probability chance that the random value is {@code true}
     * @return pseudorandom {@code boolean} value
     */
    public nextBoolean (double probability) => (boolean)
	{
        if (probability < 0.0 or probability > 1.0)
            throw IllegalArgumentException:create ("Probability must be between 0.0 and 1.0 inclusive.");
        if (probability == 0.0) return false;             // fix half-open issues
        else if (probability == 1.0) return true; // fix half-open issues
        return nextDouble() < probability; 
    }
        
    /**
     * Produces a pseudorandom {@code int} value between 0 (inclusive) and the
     * specified value (exclusive).
     * @param n one more than the maximum random value
     * @return pseudorandom {@code int} value      
     */
    public nextInt(int n) => (int) 
    {
        if (n <= 0)
            throw IllegalArgumentException:create("Non-positive maximum value for random number: " # n);
        
        if ((n & -n) == n) //is that for 1 only?
            return cast<int>((cast<long>(n) * cast<long>(next(31))) >> 31);
        
        int bits, val;
        do 
        {
            bits = next(31);
            val = bits % n;
        } 
        while(bits - val + (n-1) < 0);
        return val;
	}
	
	/**
     * Produces a pseudorandom {@code int} uniformly distributed across all
     * possible {@code int} values.     
     * @return pseudorandom {@code int} value      
     */	
	public nextInt() => (int)
	{
        return cast<int>(nextUInt());
	}
	
	/**
     * Produces a pseudorandom {@code uint} uniformly distributed across all
     * possible {@code uint} values.     
     * @return pseudorandom {@code uint} value      
     */
	public nextUInt() => (uint)
	{
		uint y;
        
        if (mti >= N)   // generate N words at one time
		{
            int kk;
            uint[] mt = this:mt; // locals are slightly faster 
            uint[] mag01 = this:mag01; // locals are slightly faster 
            
            for (kk = 0; kk < N - M; kk += 1)
			{
                y = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
                mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1u];
            }
            for (; kk < N-1; kk += 1)
            {
                y = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
                mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1u];
            }
            y = (mt[N-1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
            mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1u];

            mti = 0;
		} 		
  		
        y = mt[mti];
        mti += 1;
        y ^= y >> 11;                          	// TEMPERING_SHIFT_U(y)
        y ^= (y << 7) & TEMPERING_MASK_B;       // TEMPERING_SHIFT_S(y)
        y ^= (y << 15) & TEMPERING_MASK_C;      // TEMPERING_SHIFT_T(y)
        y ^= (y >> 18);                        	// TEMPERING_SHIFT_L(y)

        return y;
	}
	
	/**
     * Produces a pseudorandom {@code long} uniformly distributed across all
     * possible {@code long} values.     
     * @return pseudorandom {@code long} value      
     */
	public nextLong() => (long)
	{
        uint y;
        uint z;

        if (mti >= N)   // generate N words at one time
		{
            int kk;
            uint[] mt = this:mt; // locals are slightly faster 
            uint[] mag01 = this:mag01; // locals are slightly faster 
            
            for (kk = 0; kk < N - M; kk+= 1)
			{
                y = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
                mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
            }
            for (; kk < N-1; kk+= 1)
			{
                y = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
                mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
            }
            y = (mt[N-1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
            mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];

            mti = 0;
		}
    		
        y = mt[mti];
        mti += 1;
        y ^= y >> 11;                          // TEMPERING_SHIFT_U(y)
        y ^= (y << 7) & TEMPERING_MASK_B;       // TEMPERING_SHIFT_S(y)
        y ^= (y << 15) & TEMPERING_MASK_C;      // TEMPERING_SHIFT_T(y)
        y ^= (y >> 18);                        // TEMPERING_SHIFT_L(y)

        if (mti >= N)   // generate N words at one time
		{
            int kk;
            uint[] mt = this:mt; // locals are slightly faster 
            uint[] mag01 = this:mag01; // locals are slightly faster 
            
            for (kk = 0; kk < N - M; kk+= 1)
			{
                z = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
                mt[kk] = mt[kk+M] ^ (z >> 1) ^ mag01[z & 0x1];
            }
            for (; kk < N-1; kk+= 1)
            {
                z = (mt[kk] & UPPER_MASK) | (mt[kk+1] & LOWER_MASK);
                mt[kk] = mt[kk+(M-N)] ^ (z >> 1) ^ mag01[z & 0x1];
            }
            z = (mt[N-1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
            mt[N-1] = mt[M-1] ^ (z >> 1) ^ mag01[z & 0x1];
            
            mti = 0;
		}
                
        z = mt[mti];
        mti += 1;
        z ^= z >> 11;                          	// TEMPERING_SHIFT_U(z)
        z ^= (z << 7) & TEMPERING_MASK_B;       // TEMPERING_SHIFT_S(z)
        z ^= (z << 15) & TEMPERING_MASK_C;      // TEMPERING_SHIFT_T(z)
        z ^= (z >> 18);                        	// TEMPERING_SHIFT_L(z)
        
        return (cast<long>(y) << 32) + cast<long>(z);
	}
	
	public nextULong() => (ulong)
	{
		return cast<ulong>(nextLong());
	}
	

    /**
     * Produces a pseudorandom {@code long} value between 0 (inclusive) and the
     * specified value (exclusive).
     * @param n one more than the maximum random value
     * @return pseudorandom {@code long} value      
     */
    public nextLong(long n) => (long) 
	{
        if(n <= 0)
            throw IllegalArgumentException:create("Non-positive maximum value for random number: " # n);
        
        long bits, val;
        do 
		{
            bits = cast<long>(cast<ulong>(nextLong()) >> 1);
            val = bits % n;
        } 
        while(bits - val + (n-1) < 0);
        return val;
	}

    /**
     * Produces a pseudorandom {@code double} value uniformly distributed between
     * 0.0 (inclusive) and 1.0 (exclusive).     
     * @return pseudorandom {@code double} value      
     */
    public nextDouble() => (double)
	{
        return ((cast<long>(next(26)) << 27) + next(27))
            / cast<double>(1L << 53);
	}
 
    /**
     * Produces a pseudorandom {@code double} value uniformly distributed between
     * 0.0 and 1.0 where the parameters determine if 0.0 and 1.0 are included
     * in the range or not.     
     * @param includeZero if {@code true}, include 0.0 as a possible output
     * @param includeOne if {@code true}, include 1.0 as a possible output
     * @return pseudorandom {@code double} value      
     */
    public nextDouble(boolean includeZero, boolean includeOne) => (double)
	{
        double d = 0.0;
        do
		{
            d = nextDouble();                           // grab a value, initially from half-open [0.0, 1.0)
            if (includeOne and nextBoolean()) d += 1.0;  // if includeOne, with 1/2 probability, push to [1.0, 2.0)
        } 
        while ( (d > 1.0) or                            // everything above 1.0 is always invalid
            (!includeZero and d == 0.0));            // if we're not including zero, 0.0 is invalid
        return d;
    }

    /**
     * Produces a pseudorandom {@code float} value uniformly distributed between
     * 0.0 (inclusive) and 1.0 (exclusive).     
     * @return pseudorandom {@code float} value      
     */
    public  nextFloat() => (float)
	{
        return next(24) / cast<float>(1 << 24);
    }

    /**
     * Produces a pseudorandom {@code float} value uniformly distributed between
     * 0.0 and 1.0 where the parameters determine if 0.0 and 1.0 are included
     * in the range or not.     
     * @param includeZero if {@code true}, include 0.0 as a possible output
     * @param includeOne if {@code true}, include 1.0 as a possible output
     * @return pseudorandom {@code float} value      
     */
    public nextFloat(boolean includeZero, boolean includeOne) => (float)
    {
        float d = 0.0f;
        do
		{
            d = nextFloat();                            // grab a value, initially from half-open [0.0f, 1.0f)
            if (includeOne and nextBoolean()) d += 1.0f; // if includeOne, with 1/2 probability, push to [1.0f, 2.0f)
        } 
        while ( (d > 1.0f) or                           // everything above 1.0f is always invalid
            (!includeZero and d == 0.0f));           // if we're not including zero, 0.0f is invalid
        return d;
	}

    /**
     * Fills an array of {@code byte} values with pseudorandom numbers.          
     * @param bytes array to fill           
     */
    public nextBytes(byte[] bytes) => ()    
    {
        for (int x=0; x < bytes->size; x+=1)
        	bytes[x] = nextByte();
    }

    /**
     * Produces a pseudorandom {@code short} uniformly distributed across all
     * possible {@code short} values.     
     * @return pseudorandom {@code short} value      
     */    
    public nextShort() => (short)
    {
        return cast<short>(next(16));
    }
    
    /**
     * Produces a pseudorandom {@code ushort} uniformly distributed across all
     * possible {@code ushort} values.     
     * @return pseudorandom {@code ushort} value      
     */
    public nextUShort() => (ushort)
    {
        return cast<ushort>(next(16));
    }

    /**
     * Produces a pseudorandom {@code byte} uniformly distributed across all
     * possible {@code byte} values.     
     * @return pseudorandom {@code byte} value      
     */  
    public nextByte() => (byte)
    {
        return cast<byte>(next(8));
    }
    
    /**
     * Produces a pseudorandom {@code ubyte} uniformly distributed across all
     * possible {@code ubyte} values.     
     * @return pseudorandom {@code ubyte} value      
     */
    public nextUByte() => (ubyte)
    {
        return cast<ubyte>(next(8));
    }

	/**
     * Produces a pseudorandom {@code double} value with a Gaussian distribution
     * whose mean is 0.0 and standard deviation is 1.0.     
     * @return pseudorandom {@code double} value      
     */
    public nextGaussian() => (double) 
    {
        if (haveNextNextGaussian) 
		{
            haveNextNextGaussian = false;
            return nextNextGaussian;
		}
        else 
        {
            double v1, v2, s;
            do 
			{ 
                v1 = 2 * nextDouble() - 1; // between -1.0 and 1.0
                v2 = 2 * nextDouble() - 1; // between -1.0 and 1.0
                s = v1 * v1 + v2 * v2;
			} while (s >= 1 or s==0 );
            double multiplier = (-2 * s.logBaseE()/s).squareRoot();
            nextNextGaussian = v2 * multiplier;
            haveNextNextGaussian = true;
            return v1 * multiplier;
		}
	}
}
