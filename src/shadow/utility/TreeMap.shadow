/**
 * Class {@code TreeMap<K,V>} stores an ordered map, also known as an ordered
 * symbol table, of key-value pairs with entries mapping keys of type {@code K}
 * to values of type {@code V}.  This ordered map is implemented with a
 * left-leaning red-black binary search tree based on a Shadow port of
 * Sedgewick and Wayne's Java implementation of a left-leaning red-black
 * binary search tree, allowing keys to be added, found, and deleted in
 * logarithmic time. {@code TreeMap<K,V>} requires that type {@code K} has the
 * {@code CanCompare<K>} interface, imposing an ordering on the keys.  If
 * ordering of keys is not required, the {@code HashMap<K,V>} class may
 * provide a faster implementation of a map.  
 *
 * @seeDoc shadow:standard@CanCompare
 * @seeDoc shadow:utility@HashMap
 * @seeUrl http://algs4.cs.princeton.edu/33balanced/RedBlackBST.java.html
 * Sedgewick and Wayne's Left-Leaning Red-Black BST Implementation
 */ 
class shadow:utility@
	TreeMap<K is CanCompare<K>, V is CanEqual<V>>
is  OrderedMap<K,V>
{
    nullable Node<K,V> root = null;  // root of the BST
    /// Gets the number of key-value pairs in the ordered map as a {@code long}.
    locked get long sizeLong = 0L;	//number of key-value pairs in the map
    long modifications = 0L;		//modifications to BST, used for fail-fast iterators
    
    /// Gets the number of key-value pairs in the ordered map as an {@code int}.
    public readonly get size() => (int)
	{
		return cast<int>(sizeLong);
	}
    

    // BST node data type
    private locked class Node<K is CanCompare<K>, V is CanEqual<V>>
    {
        get set K key;           	// key
        get set V value;         	// associated value
        get set nullable Node<K,V> left;	// left subtree
        get set nullable Node<K,V> right;// right subtree
        get set boolean red;     	// color of parent link  

		// Create a node with the given key and value
		// key and value should ideally not be settable, but
		// the delete algorithm swaps node contents
        public create(K key, V value, boolean color) 
        {
            this:key = key;
            this:value = value;
            this:red = color;
            this:left = null;
            this:right = null;            
        }
        
        public readonly toString() => (String)
        {
        	return key # "=" # value;
        }
    }
   
    /*
     * Returns {@code true} if node is red.  Null nodes are considered black.
     */
    private readonly isRed(nullable Node<K,V> node) => (boolean)
    {
        try
        {
        	return check(node)->red;
        }
        recover
        {
        	return false;
        }        
    }
    
    /**
	 * Removes all entries from the ordered map.
	 * @return ordered map after being cleared
	 */
    public clear() => ( TreeMap<K,V> )
    {
    	root = null;
    	sizeLong = 0L;
    	modifications += 1L;
    	return this;
    }

    /**
     * Checks whether or not the ordered map is empty.
     * @return {@code true} if the ordered map is empty
     */
    public readonly isEmpty() => (boolean)
    {
        return root === null;
    }

    /* BST search */

    /**
	 * Retrieves the value associated with the key.
	 * If the key is not present, {@code null} is returned. This operation
	 * runs in logarithmic time.  
	 * @param key key to find
	 * @return value at key location or {@code null} if not found
	 */
    public readonly index(K key) => (nullable V)
    {       
        return find(root, key);
    }

    /*
     * Helper method to find key in the tree.
     * Iterative rather than recursive.
     */ 
    private readonly find(nullable Node<K,V> node, K key) => (nullable V) 
    {
    	try
    	{
	        while( true )
	        {
	        	var notNull = check(node); // If node is ever null, jump out.	        	
	            int compare = key.compare(notNull->key);
	            if( compare < 0 )
	            	node = notNull->left;
	            else if( compare > 0 )
	            	node = notNull->right;
	            else
	            	return notNull->value;
	      	}
	     }
	     recover {}
	     
        return null;
    }

    /**
	 * Checks to see if the ordered map contains a key. This operation runs in
	 * logarithmic time.	   
	 * @param key key to find
	 * @return {@code true} if present
	 */
    public readonly containsKey(K key) => (boolean)  
    {
        return index(key) !== null;
    }
    
    /**
	 * Checks to see if the ordered map contains a particular value.  This
	 * operation runs in time linear in the size of the tree.	   
	 * @param value value to find
	 * @return {@code true} if present
	 */
    public readonly containsValue(V value) => (boolean)
    {
    	return containsValue(root, value);
    }
    
    /*
     * Helper method to find a value by doing a recursive, preorder traversal
     * of the tree. Would a BFS be a better idea?
     */
    private readonly containsValue(nullable Node<K,V> node, V value) => (boolean)
    {
    	try
    	{
    		Node<K,V> notNull = check(node);
    		if( notNull->value == value )
    			return true;
    		if( containsValue(notNull->left, value) )
    			return true;
    		if( containsValue(notNull->right, value) )
    			return true;
    	}
    	recover {}   
    	
    	return false; 
    }

    /* Tree insertion, with red-black balancing */

   /**
	 * Stores value object in the location associated with the key. This
	 * operation runs in logarithmic time.
	 * @param key key location
	 * @param value value to store
	 */ 
    public index(K key, V value) => ()
    {
        (root, ) = insert(root, key, value);         
        check(root)->red = false; // Never null after insert.         
        modifications += 1L;           
    }
    
   /**
	 * Stores value object in the location associated with the key and returns
	 * the old value if there was one at that location. This operation runs
	 * in logarithmic time.  
	 * @param key key location
	 * @param value value to store
	 * @return old value at location or {@code null} if key was not already
	 * present
	 */
    public add(K key, V value) => (nullable V existing)
    {
    	(root, nullable V oldValue) = insert(root, key, value);
    	check(root)->red = false; // Never null after insert.         
        modifications += 1L;
        return oldValue;   
    }

    /*
     * Helper method for insertion, doing regular, recursive BST insertion
     * with red-black rotations and recolors afterwards, if needed.      
     */
    private insert(nullable Node<K,V> node, K key, V value) => (Node<K,V>, nullable V) 
    {
		try
		{
			Node<K,V> notNull = check(node);
			nullable V oldValue;
	        int compare = key.compare(notNull->key);
	        if( compare < 0 )
	        	(notNull->left, oldValue)  = insert(notNull->left,  key, value); 
	        else if ( compare > 0 )
	        	(notNull->right, oldValue) = insert(notNull->right, key, value); 
	        else
	        	(notNull->value, oldValue) = (value, notNull->value);
	
	        // Fix any right-leaning links.
	        if (isRed(notNull->right) and !isRed(notNull->left))
	        	notNull = rotateLeft(notNull);
	        if (isRed(notNull->left)  and  isRed(check(notNull->left)->left))
	        	notNull = rotateRight(notNull);
	        if (isRed(notNull->left)  and  isRed(notNull->right))
	        	flipColors(notNull);        
        	return (notNull, oldValue);
        }
        recover
        {
        	// Null case, create new node.
        	sizeLong += 1L;
        	return (Node<K,V>:create(key, value, true), null);
        }
    }

    /* Tree deletion, with red-black balancing */

    /**
     * Removes the smallest key and associated value from the ordered map.
     * @return ordered map after deletion
     * @throws NoSuchElementException if ordered map is empty          
     */
    public deleteMin() => ( TreeMap<K,V> )
    {
		try
		{
			var notNull = check(root);
	        // If both children of root are black, set root to red.
	        if (!isRed(notNull->left) and !isRed(notNull->right))
	            notNull->red = true;

        	root = deleteMin(notNull);
        	try
        	{
        		check(root)->red = false;
        	}
        	recover {}
        	
        	sizeLong -= 1L;	
        	modifications += 1L;
        }
        recover
        {
        	throw NoSuchElementException:create("Cannot call deleteMin() on empty map");
        }
        
        return this;
    }

    /*
     * Helper method for deleteMin(), using recursive delete with red-black
     * balancing.    
     */
    private deleteMin( Node<K,V> node ) => ( nullable Node<K,V> )
    { 
    	try
    	{
    		var leftNode = check(node->left);
        	if (!isRed(leftNode) and !isRed(leftNode->left))
            	node = moveRedLeft(node);
        	node->left = deleteMin(check(node->left));
        	return balance(node);
        }
        recover
        {
        	return null;
        }
    }
        
    /**
     * Removes the largest key and associated value from the map.
     * @return ordered map after deletion
     * @throws NoSuchElementException if ordered map is empty          
     */
    public deleteMax() => ( TreeMap<K,V> ) 
    {    
    	try
    	{
    		var notNull = check(root);
	        // If both children of root are black, set root to red.
	        if (!isRed(notNull->left) and !isRed(notNull->right))
	            notNull->red = true;
	
	        root = deleteMax(notNull);
	        try
	        {
        		check(root)->red = false;
        	}
        	recover {}	        
	        modifications += 1L;
	        sizeLong -= 1L;	       
        }
        recover
        {
        	throw NoSuchElementException:create("Cannot call deleteMax() on an empty map");
        }
        
        return this;       
    }

    /*
     * Helper method for deleteMax(), using recursive delete with red-black
     * balancing.    
     */
    private deleteMax(Node<K,V> node) => (nullable Node<K,V>) 
    { 
        if (isRed(node->left))
            node = rotateRight(node);
            
        try
        {
        	var rightNode = check(node->right);
        	if (!isRed(rightNode) and !isRed(rightNode->left))
            	node = moveRedRight(node);
        	node->right = deleteMax(check(node->right));
        	return balance(node);
        }
        recover
        {
        	return null;
        }
    }

    /**
	 * Removes the key-value pair associated with the key location. This
	 * operation runs in logarithmic time.	   
	 * @param key key to remove
	 * @return value being removed or {@code null} if not present
	 */
    public remove(K key) => (nullable V)
    {
        if( !containsKey(key) )
        	return null;
        	
       	var notNull = check(root); // Can't be null if contains key.

        // If both children of root are black, set root to red.
        if (!isRed(notNull->left) and !isRed(notNull->right))        
        	notNull->red = true;        

        (root, V value) = remove(notNull, key);
        try
        {
    		check(root)->red = false;
    	}
    	recover {}
    	modifications += 1L; 
    	sizeLong -= 1L;   	
    	return value;
    }

    /*
     * Helper method for remove(K), using recursive delete with red-black
     * balancing.    
     */
    private remove(Node<K,V> node, K key) => (nullable Node<K,V>, V value)
    {
    	V value;
        if (key.compare(node->key) < 0) 
        {        	
        	var leftNode = check(node->left);
            if (!isRed(leftNode) and !isRed(leftNode->left))
                node = moveRedLeft(node);
            (node->left, value) = remove(check(node->left), key);            
        }
        else
        {        	
            if( isRed(node->left) )
                node = rotateRight(node);
            if( key.equal(node->key) and (node->right === null) )
            {            	
                return (null, node->value);
            }
            if( !isRed(node->right) and !isRed(check(node->right)->left ) )
                node = moveRedRight(node);
                
            var rightNode = check(node->right); // Impossible to be null.
            if( key.equal(node->key) )
            {
            	value = node->value;            	 
                var x = min(rightNode);
                node->key = x->key;
                node->value = x->value;
                node->right = deleteMin(rightNode);                                
            }
            else                        
            	(node->right, value) = remove(rightNode, key);            
        }        
        node = balance(node);
        return (node, value);
    }

    /* Red-black tree helper functions */

    /*
     * Leans a left-leaning link to the right.
     */
    private rotateRight(Node<K,V> node) => (Node<K,V>)
    {     	      
        var x = check(node->left);
        node->left = x->right;
        x->right = node;
        x->red = node->red;
        node->red = true;     
        return x;
    }

    /*
     * Leans a right-leaning link to the left.
     */
    private rotateLeft(Node<K,V> node) => (Node<K,V>)
    {       	    
        var x = check(node->right);
        node->right = x->left;
        x->left = node;
        x->red = node->red;
        node->red = true;
        return x;
    }

    /*
     * Flips the colors of a node and its two children.
     */
    private flipColors(Node<K,V> node) => ()
    {
        node->red = !node->red;
        var leftNode = check(node->left);
        var rightNode = check(node->right);
        leftNode->red = !leftNode->red;
        rightNode->red = !rightNode->red;
    }

    /*
     * Assuming that node is red and both node->left and node->left->left
     * are black, makes node->left or one of its children red.
     */
    private moveRedLeft(Node<K,V> node) => (Node<K,V>)
    {
        flipColors(node);
        var rightNode = check(node->right);
        if( isRed(rightNode->left) )
        { 
            node->right = rotateRight(rightNode);
            node = rotateLeft(node);
            flipColors(node);
        }
        return node;
    }

    /*
     * Assuming that node is red and both node->right and node->right->left
     * are black, makes node->right or one of its children red.
     */
    private moveRedRight(Node<K,V> node) => (Node<K,V>)
    {
        flipColors(node);
        if (isRed(check(node->left)->left)) 
        { 
            node = rotateRight(node);
            flipColors(node);
        }
        return node;
    }

    /*
     * Restores red-black tree invariant.
     */
    private balance(Node<K,V> node) => (Node<K,V>)
    {
        if( isRed(node->right) )
        	node = rotateLeft(node);
        if( isRed(node->left) and isRed(check(node->left)->left) )
        	node = rotateRight(node);
        if( isRed(node->left) and isRed(node->right) )
        	flipColors(node);        
        return node;
    }

   /* Ordered map methods */

    /**
     * Returns the smallest key in the ordered map.
     * @return smallest key
     * @throws NoSuchElementException if the ordered map is empty
     */
    public readonly  min() => (K)
    {
    	try
    	{
    		var notNull = check(root);
    		return min(notNull)->key;
    	}
    	recover
    	{
            throw NoSuchElementException:create("Cannot call min() on empty map");
        }        
    } 

    /*
     * Helper method for min(), iterative.
     */ 
    private readonly min(Node<K,V> node) => (Node<K,V>)
    {    
    	try
    	{
    		while( true )    		
    			node = check(node->left);
    	}
    	recover
    	{    		
        	return node;
        } 
    } 

    /**
     * Returns the largest key in the ordered map.
     * @return largest key
     * @throws NoSuchElementException if the ordered map is empty
     */
    public readonly max() => (K)
    {
        try
    	{
    		var notNull = check(root);
    		return max(notNull)->key;
    	}
    	recover
    	{
            throw NoSuchElementException:create("Cannot call max() on empty map");
        } 
    } 

    /*
     * Helper method for max(), iterative.
     */ 
    private readonly max(Node<K,V> node) => (Node<K,V>)
    {
        try
    	{
    		while( true )
    			node = check(node->right);    		
    	}
    	recover
    	{    		
        	return node;
        }
    } 


    /**
     * Returns the largest key in the ordered map less than or equal to the
     * given key.
     * @param key key to compare against
     * @return largest key in the ordered map less than or equal to {@code key}     
     */
    public readonly floor(K key) => (nullable K)
    {           
        try
        {
        	nullable var lowest = floor(root, key);
        	return check(lowest)->key;        
        }
        recover
        {
        	return null;
        }
    }    

    /*
     * Helper method for floor(), recursive.
     */
    private readonly floor(nullable Node<K,V> node, K key) => (nullable Node<K,V>)
    {
    	try
    	{
    		var notNull = check(node);
    		int compare = key.compare(notNull->key);
	        if( compare == 0 )
	        	return node;
	        if (compare < 0) 
	        	return floor(notNull->left, key);
	        
	        nullable Node<K,V> lowest = floor(notNull->right, key);
	        if (lowest !== null)
	        	return lowest; 
	        else
	        	return node;
    	}
    	recover
    	{
    		return null;
    	}
    }

    /**
     * Returns the smallest key in the ordered map greater than or equal to
     * the given key.
     * @param key key to compare against
     * @return smallest key in the ordered map less than or equal to
     * {@code key}     
     */
    public readonly ceiling(K key) => (nullable K)
    {   
    	try
    	{
        	nullable var highest = ceiling(root, key);
        	return check(highest)->key;
       	}
        recover
        {
        	return null;
        }  
    }

    /*
     * Helper method for ceiling(), recursive.
     */
    private readonly ceiling(nullable Node<K,V> node, K key) => (nullable Node<K,V>)
    {  
    	try
    	{
    		var notNull = check(node);
    		int compare = key.compare(notNull->key);
	        if( compare == 0 )
	        	return node;
	        if( compare > 0 )
	        	return ceiling(notNull->right, key);
	        	
	        nullable var highest = ceiling(notNull->left, key);
	        if( highest !== null )
	        	return highest; 
	        else
	        	return node;    		
    	}
    	recover
    	{
    		return null;
    	}    
    }  

    /**
     * Returns a deque of all the keys in the ordered map.     
     * @return iterable collection of all keys	 
     */
    public readonly keys() => (ArrayDeque<K>) 
    {
        if( isEmpty() )
        	return ArrayDeque<K>:create();
        return keys(min(), max());
    }

    /**
     * Returns a deque containing all the keys in the ordered map
     * in the given range.
     * @param low lowest possible key in the range
     * @param high highest possible key in the range
     * @return deque containing all keys between {@code low} (inclusive)
     * and {@code high} (inclusive)     
     */
    public readonly keys(K low, K high) => (ArrayDeque<K>)
    {
    	var queue = ArrayDeque<K>:create();        
        keys(root, queue, low, high);
        return queue;
    } 

    /* 
     * Helper method for keys(K, K) that recursively adds the keys between
     * low and high in the subtree rooted at node to the queue.
     */ 
    private readonly keys(nullable Node<K,V> node, ArrayDeque<K> queue, K low, K high) => ()
    { 
        try
        { 
        	var notNull = check(node);
	        int compareLow = low.compare(notNull->key); 
	        int compareHigh = high.compare(notNull->key); 
	        if (compareLow < 0)
	        	keys(notNull->left, queue, low, high); 
	        if (compareLow <= 0 and compareHigh >= 0)
	        	queue.addLast(notNull->key); 
	        if( compareHigh > 0 )
	        	keys(notNull->right, queue, low, high); 
	    }
	    recover
	    {}
    }
    
    /**
	 * Produces a {@code String} representation of the ordered map, listing
	 * all key-value pairs in an unspecified order.
	 * @return {@code String} representation 
	 */
    public readonly toString() => (String)
	{
		if( sizeLong == 0L )
			return "{}";	
	
		var output = MutableString:create("{");
		addStrings(root, output);
		output.delete(output->sizeLong - 2L, output->sizeLong); //removes last ", "				
		output.append("}");
		return output.toString();
	}
	
	/* 
	 * Helper method for toString() which adds key-value pairs to a
	 * MutableString using a recursive, in order traversal.
	 */
	private readonly addStrings(nullable Node<K,V> node, MutableString output) => ()
	{
		try
		{
			var notNull = check(node);
			
			addStrings(notNull->left, output);			
			output.append(notNull);
			output.append(", ");
			addStrings(notNull->right, output);
		}
		recover {}
	}
    
    /**
	 * Creates an iterator to iterate over all the values in the ordered map.	   
	 * @return iterator
	 */
    public readonly iterator() => (Iterator<V>)
    {
    	return TreeMapIterator<K,V>:create(this);
    }
    
    // Iterator class for TreeMap
    private class TreeMapIterator<K is CanCompare<K>, V is CanEqual<V>> is Iterator<V>
	{
		// Current stack of Nodes, since this tree doesn't have parent references.
		ArrayDeque<Node<K,V>> stack = ArrayDeque<Node<K,V>>:create();		 		
		immutable long expectedModifications;
		TreeMap<K,V> treeMap;
		
		// Go all the way to left when creating iterator.
		public create(TreeMap<K,V> treeMap)
		{			
			this:treeMap = treeMap;
			expectedModifications = treeMap:modifications;
		
			try
			{
				var current = check(treeMap:root);				
				while( true )
				{					
					stack.addLast(current);
					current = check(current->left);
				}
			}
			recover
			{} 
		}

		private readonly checkForModifications() => ()
		{
			if ( treeMap:modifications != expectedModifications )
				throw IllegalModificationException:create();
		}

		public readonly hasNext() => ( boolean )
		{
			checkForModifications();
			return stack->sizeLong != 0L;
		}

		// Determines next value through successor relationship
		public next() => ( V value )
		{
			checkForModifications();
			
			if( stack->sizeLong == 0L )
				throw NoSuchElementException:create();
			
			// Get node from the stack and its value.	
			var current = stack.getLast();
			V value = current->value;
			
			// Add leftmost node of right subtree, if present
			if( current->right !== null )
			{
				try
				{
					current = check(current->right);				
					while( true )
					{						
						stack.addLast(current);
						current = check(current->left);
					}
				}
				recover
				{}
			}
			// If no right subtree, we're done with the node.
			// Remove it and its parents, as long as they
			// are all right children.			
			else
			{				
				do
				{
					current = stack.removeLast();
				}
				while( stack->sizeLong > 0L and current === stack.getLast()->right );
			}			
			
			return value;
		}
	}
}