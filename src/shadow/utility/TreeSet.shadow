/**
 * Class {@code TreeSet<V>} stores an ordered set, an ordered collection of
 * objects of type {@code V} with no repetitions. Internally, this ordered set
 * is implemented with a balanced binary search tree mapping objects of type
 * {@code V} to themselves. This implementation allows objects to be added,
 * found, and deleted in logarithmic time. {@code TreeSet<V>} requires that
 * type {@code V} has the {@code CanCompare<V>} interface, imposing an
 * ordering on the objects.  If ordering of objects is not required, the
 * {@code HashSet<V>} class may provide a faster implementation of a set. 
 *
 * @seeDoc shadow:standard@CanCompare
 * @seeDoc shadow:utility@HashSet
 */
class shadow:utility@
	TreeSet<V is CanCompare<V>>
is  OrderedSet<V>
{
	TreeMap<V,V> map;

	/**
	 * Creates an empty {@code TreeSet<V>}.
	 */
	public create()
	{
		map = TreeMap<V,V>:create();
	}	
	
	/**
	 * Checks to see if the object is present in the ordered set. This
	 * operation runs in logarithmic time.	   
	 * @param value object to search for
	 * @return {@code true} if the object is present
	 */
	public readonly index( V value ) => ( boolean found )
	{
		return map.containsKey(value);
	}
	
	/**
	 * Adds or removes an object to or from the ordered set.  This operation
	 * runs in logarithmic time.	   	   
	 * @param value object to be added or removed
	 * @param add add object if {@code true}, remove if {@code false}
	 */
	public index( V value, boolean add ) => ()
	{
		if ( add )
			map[value] = value;		
		else			
			map.remove(value);
	}

	/**
	 * Adds an object to the ordered set. This operation runs in logarithmic
	 * time.	 	   
	 * @param value object to be added
	 * @return {@code true} if added to the ordered set, {@code false} if
	 * already present
	 */
	public add( V value ) => ( boolean added )
	{	
		return map.add( value, value ) === null;
	}
	
	/**
	 * Removes an object from the ordered set. This operation runs in
	 * logarithmic time.	    	   
	 * @param value object to be removed
	 * @return {@code true} if successfully removed, {@code false} if not
	 * present
	 */
	public remove( V value ) => ( boolean removed )
	{	
		return map.remove(value) !== null;
	}
	
	/**
	 * Checks to see if the ordered set contains the specified object. This
	 * operation runs in logarithmic time.	  	   
	 * @param value object to look for
	 * @return {@code true} if object is present	 
	 */
	public readonly contains( V value ) => ( boolean found )
	{		
		return map.containsKey(value);
	}

	/**
	 * Creates an iterator to iterate over all the objects in the ordered set.	   
	 * @return iterator
	 */
	public readonly iterator() => ( Iterator<V> )
	{
		return map.iterator();
	}
	
	/**
	 * Removes all objects from the ordered set and resets the capacity to
	 * default.
	 * @return ordered set after being cleared
	 */
	public clear() => ( TreeSet<V> )
	{
		map.clear();
		return this;
	}
	
	/**
	 * Gets the number of objects in the ordered set as an {@code int}.
	 * @return size of ordered set
	 */
	public readonly get size() => (int size)
	{
		return map.size();	
	}
	
	/**
	 * Gets the number of objects in the ordered set as a {@code long}.
	 * @return size of ordered set
	 */
	public readonly get sizeLong() => (long size)
	{
		return map.sizeLong();	
	}
	
	/**
     * Checks whether or not the ordered set is empty.
     * @return {@code true} if the ordered set is empty
     */
	public readonly isEmpty() => (boolean empty)
	{
		return map.size() == 0;
	}
	
	/**
	 * Produces a {@code String} representation of the ordered set, listing
	 * all the objects in order.
	 * @return {@code String} representation 
	 */
	public readonly toString() => (String)
	{
		var output = MutableString:create("{");
		boolean first = true;
		foreach(V value in map)
		{			
			if( first )
				first = false;
			else
				output.append(", ");
			output.append(value);
		}		
		output.append("}");
		return output.toString();
	}	
	
	/**
     * Returns the smallest object in the ordered set.
     * @return smallest object
     * @throws NoSuchElementException if the ordered set is empty
     */
	public readonly min() => (V)
	{
		if( map.isEmpty() )
			throw NoSuchElementException:create("Cannot call min() on empty set");			
		return map.min();
	}
	
	/**
     * Returns the largest object in the ordered set.
     * @return largest object
     * @throws NoSuchElementException if the ordered set is empty
     */
    public readonly max() => (V)
    {
		if( map.isEmpty() )
			throw NoSuchElementException:create("Cannot call max() on empty set");			
		return map.max();    
    }    
    
    /**
     * Returns the largest object in the ordered set less than or equal to the
     * given object.
     * @param object object to compare against
     * @return largest object in the ordered set less than or equal to
     * {@code object}     
     */   
    public readonly floor(V object) => (nullable V)
    {
    	return map.floor(object);
    }
    
     /**
     * Returns the smallest object in the ordered set greater than or equal to
     * the given object.
     * @param object object to compare against
     * @return smallest object in the ordered set less than or equal to
     * {@code object}     
     */
    public readonly ceiling(V object) => (nullable V)
    {
    	return map.ceiling(object);
    }    
    
    /**
     * Returns a deque containing all the objects in the ordered set
     * in the given range.
     * @param low lowest possible object in the range
     * @param high highest possible object in the range
     * @return deque containing all objects between {@code low} (inclusive)
     * and {@code high} (inclusive)     
     */
    public readonly values(V low, V high) => (ArrayDeque<V>)
    {
    	return map.keys(low, high);
    }
}
