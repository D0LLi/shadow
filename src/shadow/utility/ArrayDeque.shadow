/**
 * Class {@code ArrayDeque<E>} stores a double-ended queue (deque) of
 * elements of type {@code E}, implemented with a dynamic array as internal
 * storage. A deque can be used in place of a stack or queue.
 * {@code ArrayDeque<E>} is optimized for adding and removing from both the
 * front and the back of the deque but does not provide the arbitrary access
 * to elements that a general list data structure would.
 */
class shadow:utility@
	ArrayDeque<E>
is  Deque<E>
{
	/// Gets size of the deque.
	locked get long sizeLong = 0L;
	long start = 0L;
	nullable E[] elements = E:null[10];
	long modifications = 0L;	
	
	public readonly get size() => (int)
	{
		return cast<int>(sizeLong);
	}
	
	/**
	 * Checks whether or not the deque is empty.
	 * @return {@code true} if the deque is empty
	 */
	public readonly isEmpty() => ( boolean )
	{
		return sizeLong == 0L;
	}	
	
	// Doubles the size of the backing array.	
	private grow() => ()
	{
		nullable E[] temp = E:null[elements->size * 2];
		for( int i = 0; i < elements->size; i += 1 )
			temp[i] = elements[(start + i) % elements->size];
		elements = temp;
		start = 0L;	
	}

	/**
	 * Adds an element to the beginning of the deque. This operation is
	 * constant time in the best case and amortized constant time in the worst
	 * case, which occurs when deque storage is full and a linear-time array
	 * resize must be performed.
	 * @param element element to be added
	 * @return deque after the element is added	   
	 */
	public addFirst( E element ) => ( ArrayDeque<E> )
	{
		if( elements->sizeLong == sizeLong )
			grow();
			
		start -= 1L;
		if( start < 0L )
			start = elements->sizeLong - 1L;
			
		elements[start] = element;
		sizeLong += 1L;
				
		modifications += 1L; 
		return this;
	}
	
	/**
	 * Adds an element to the end of the deque. This operation is
	 * constant time in the best case and amortized constant time in the worst
	 * case, which occurs when deque storage is full and a linear-time array
	 * resize must be performed.
	 * @param element element to be added
	 * @return deque after the element is added	   
	 */
	public addLast( E element ) => ( ArrayDeque<E> )
	{
		if( elements->sizeLong == sizeLong )
			grow();
					
		elements[(start + sizeLong) % elements->sizeLong] = element;
		sizeLong += 1L;
				
		modifications += 1L; 
		return this;
	}
	
	/**
	 * Gets the element at the beginning of the deque. This operation is
	 * constant time.
	 * @return first element in the deque
	 * @throws NoSuchElementException if the deque is empty  
	 */
	public readonly getFirst() => (E element)
	{
		if( sizeLong == 0L )
			throw NoSuchElementException:create();		

		return check(elements[start]);		
	}
	
	/**
	 * Gets the element at the end of the deque. This operation is constant
	 * time.
	 * @return last element in the deque
	 * @throws NoSuchElementException if the deque is empty  
	 */	
	public readonly getLast() => (E element)
	{
		if( sizeLong == 0L )
			throw NoSuchElementException:create();

		return check(elements[(start + sizeLong - 1) % elements->sizeLong]);
	}
	
	
	/**
	 * Removes the element at the beginning of the deque. This operation is
	 * constant time.	 
	 * @return element being removed
	 * @throws NoSuchElementException if the deque is empty	   
	 */
	public removeFirst() => (E element)
	{
		if( sizeLong == 0L )
			throw NoSuchElementException:create();
		
		E temp = check(elements[start]); 
		start = (start + 1L) % elements->sizeLong;
		sizeLong -= 1L;
		modifications += 1L;			
		return temp;
	}
	
	/**
	 * Removes the element from the end of the deque. This operation is
	 * constant time.	 
	 * @return element being removed
	 * @throws NoSuchElementException if the deque is empty	   
	 */
	public removeLast() => ( E element )
	{
		if( sizeLong == 0L )
			throw NoSuchElementException:create();
	
		E temp = check(elements[(start + sizeLong - 1L) % elements->sizeLong]);
		sizeLong -= 1L;
		modifications += 1L;			
		return temp;
	}
	
	/**
	 * Removes all elements from the deque. This operation is
	 * constant time.	 
	 * @return deque after being cleared	 	   
	 */	
	public clear() => ( ArrayDeque<E> )
	{
		sizeLong = 0L;
		modifications += 1L;
		return this;
	}
		
	/**
	 * Produces a {@code String} representation of the deque, listing all
	 * elements in order.
	 * @return {@code String} representation 
	 */
	public readonly toString() => (String)
	{
		MutableString string = MutableString:create("[");
		boolean first = true;
			
		foreach( E value in this )
		{
			if( first )
				first = false;
			else
				string.append(", ");
			string.append(#value);
		}
		
		return #string.append("]");
	}

	/**
	 * Creates an iterator to iterate over all the values in the deque.	   
	 * @return iterator
	 */
	public readonly iterator() => (Iterator<E>)
	{
		return ArrayDequeIterator<E>:create(this);
	}
	
	/*
	 * Simple iterator class uses a single index to keep track of the current
	 * location in the deque.
	 */
	private class ArrayDequeIterator<E> is Iterator<E>
	{
		long index = 0;
		immutable long expectedModifications;
		ArrayDeque<E> arrayDeque;
		
		public create(ArrayDeque<E> arrayDeque)
		{
			this:arrayDeque = arrayDeque;
			expectedModifications = arrayDeque:modifications;
		}
		
		private readonly checkForModifications() => ()
		{
			if( expectedModifications != arrayDeque:modifications )
				throw IllegalModificationException:create();		
		}
	
		public readonly hasNext() => (boolean)
		{
			checkForModifications();
			return index < arrayDeque->size;
		}
		
		public next() => (E)
		{
			checkForModifications();
			if( index >= arrayDeque->sizeLong )
				throw NoSuchElementException:create();
	
			E temp = check(arrayDeque:elements[(arrayDeque:start + index) % arrayDeque:elements->sizeLong]);
			index += 1L;
			return temp;
		}
	}
}