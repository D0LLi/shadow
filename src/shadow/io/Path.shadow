/**
 * Class {@code Path} provides utilities for managing a path to a file in
 * the operating system.
 */
immutable class shadow:io@Path
{
	String[] components;

    [ImportAssembly]
    private readonly __shadow_io__Path_fileSeparator() => (code);
    [ImportAssembly]
    private readonly __shadow_io__Path_pathSeparator() => (code);

	/**
	 * Creates a {@code Path} object corresponding to the path specified by
	 * the given {@code String}.
	 * @param path path to file 
	 */
	public create( String path )
	{
		int index = 0, count = 1, start = 0;
		ubyte posixSeparator = cast<ubyte>('/');
		ubyte windowsSeparator = cast<ubyte>('\\');
		for (int i = 0; i < path->size; i += 1)
		{
			if (path[i] == posixSeparator or path[i] == windowsSeparator)
			{
				if ( i != start )
					count += 1;
				start = i + 1;
			}
		}
		
		components = freeze(String:create[count]);
		
		start = 0;
		for (int i = 0; i < path->size; i += 1)
		{
			if (path[i] == posixSeparator or path[i] == windowsSeparator)
			{
				if (i != start)
				{
					components[index] = path.substring(start, i);
					index += 1;
				}
				start = i + 1;
			}
		}
		if ( index != count )		
			components[index] = path.substring(start);
	}

	public create(String[] components)
	{
	    this:components = freeze(components);
	}
	
	/**
	 * Gets the operating system-specific UTF-8 code point corresponding to
	 * the file separator, {@code \} in Windows and {@code /} in Linux and
	 * macOS.
	 * @return separator character 
	 */
	public locked get fileSeparator() => ( code )
	{
	    return __shadow_io__Path_fileSeparator();
	}

    /**
     * Gets the operating system-specific UTF-8 code point corresponding to
     * the path separator, {@code ;} in Windows and {@code :} in Linux and
     * macOS.
     * @return separator character
     */
    public locked get pathSeparator() => ( code )
    {
        return __shadow_io__Path_pathSeparator();
    }
	
	/**
	 * Returns a {@code String} representation of the path.
	 * @return path as a {@code String}
	 */
	public readonly toString() => ( String )
	{		
		if ( components->size == 0 )
			return "";
		
		var string = MutableString:create(components[0]);
	
		for ( int i = 1; i < components->size; i += 1 )
			string.append(this->fileSeparator).append(components[i]);
		
		return #string;
	}
}
