/**
 * Class {@code Mutex} is an implementation of Mutual-Exclusion in Shadow. This implementation
 * allows nested locks, which can be useful in some scenarios, such as with recursive methods.
 *
 * @author Claude Abounegm
 *
 * @seeDoc shadow:test@MutexTest
 *
 * @seeDoc shadow:natives@Signaler
 * @seeDoc shadow:standard@Thread
 * @seeDoc shadow:standard@Mailbox
 */
locked immutable class shadow:natives@
	Mutex
{
    [ImportAssembly]
	private readonly __shadow_natives__Mutex_initialize() => (Pointer);
	[ImportAssembly]
	private readonly __shadow_natives__Mutex_destroy(Pointer ptr) => (boolean);
	[ImportAssembly]
	private readonly __shadow_natives__Mutex_lock(Pointer ptr, Thread currentThread) => ();
	[ImportAssembly]
	private readonly __shadow_natives__Mutex_unlock(Pointer ptr, Thread currentThread) => (boolean);
	[ImportAssembly]
	private readonly __shadow_natives__Mutex_getOwner(Pointer ptr) => (nullable Thread);
	
	Pointer ptr;

	/**
	* Initializes a new {@code Mutex}.
	*/
	public create()
	{
		ptr = __shadow_natives__Mutex_initialize();
		
		if(!ptr->isValid) {
			throw MutexException:create("An error occurred while initializing the mutex.");
		}
	}
	
	/**
	* Attempts to lock this Mutex. If the Mutex is already owned by another thread, this method
	* blocks until the Mutex becomes available. If the current thread already owns this mutex and
	* recursive locks are allowed, this method will simply increase the counter. The mutex should be unlocked
	* the same number of times it was locked.
	*
	* @throws FreedResourceException if the Mutex has been freed.
	*/
	public lock() => ()
	{
	    ptr.assertValid("Mutex");
		__shadow_natives__Mutex_lock(ptr, CurrentThread->instance);
	}
	
	/**
	* Attempts to unlock this Mutex. If the Mutex has been locked mutliple times by this thread,
	* this method simply decreases the counter. This Mutex is unlocked when an corresponding unlock has been called
	* for each lock. i.e. If {@code lock()} was called twice, {@code unlock()} will unlock the mutex on
	* its second call.
	*
	* @throws MutexException if this Mutex is not owned by this thread.
	* @throws FreedResourceException if the Mutex has been freed.
	*/
	public unlock() => ()
	{
		ptr.assertValid("Mutex");
		
		if(!__shadow_natives__Mutex_unlock(ptr, CurrentThread->instance)) {
			throw MutexException:create("This mutex is not owned by '" # CurrentThread->name # "' and cannot be unlocked." # (owner() === null ? "", #owner()));
		}
	}
	
	/**
	* Frees the resources allocated by this {@code Mutex}.
	*
	* @throws MutexException if the Mutex is locked by another thread.
	*/
	public free() => ()
	{
		if(ptr->isValid) {
			if(isOwnerCurrentThread()) {
				unlock();
			} else if(owner() !== null) {
				throw MutexException:create("Cannot free a locked Mutex.");
			}
			
			__shadow_natives__Mutex_destroy(ptr);
			ptr.free();
		}
	}

	private owner() => (nullable Thread)
	{
		return __shadow_natives__Mutex_getOwner(ptr);
	}

	private isOwnerCurrentThread() => (boolean)
	{
		return CurrentThread.equal(owner());
	}
}