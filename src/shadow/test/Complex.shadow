immutable class shadow:test@
	Complex
is  CanAdd<Complex>
and	CanSubtract<Complex>
and	CanMultiply<Complex>
and	CanEqual<Complex>
{
	get int real;
	get int imaginary;
	
	public create(int real, int imaginary)
	{
		this:real = real;
		this:imaginary = imaginary;
	}
	
	public create()
	{
		this(0,0);
	}
	
	public add(Complex other) => (Complex)
	{
		return Complex:create(real + other:real, imaginary + other:imaginary);
	}
	
	public subtract(Complex other) => (Complex)
	{
		return Complex:create(real - other:real, imaginary - other:imaginary);
	}
	
	public multiply(Complex other) => (Complex)
	{
		return Complex:create(real * other:real - imaginary * other:imaginary,
					real * other:imaginary + imaginary * other:real);	
	}
	
	public equal(Complex other) => (boolean)
	{
		return real == other:real and imaginary == other:imaginary;
	}
	
	public toString() => (String)
	{
		if( real == 0 and imaginary == 0 )
			return "0";
			
		String value = "";
		if( real != 0 )
		{
			value #= real;
			
			if( imaginary == 1 )
				value #= " + i";
			else if( imaginary == -1 )
				value #= " - i";
			else if( imaginary < 0 )
				value #= " - " # imaginary.abs() # "i";				
			else if( imaginary > 1 )
				value #= " + " # imaginary # "i";			
		}
		else
		{
			if( imaginary == 1 )
				value #= "i";
			else if( imaginary == -1 )
				value #= "-i";
			else if( imaginary < 0 )
				value #= "-" # imaginary.abs() # "i";				
			else if( imaginary > 1 )
				value #= imaginary # "i";
		}
			
		return value;			
	}
	
}