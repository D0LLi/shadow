import shadow:io@Console;
import shadow:utility;

class shadow:test@EqualityComparerTest
{
	class Point1
	{
		get int x;
		get int y;
		
		public create(int x, int y)
		{
			this:x = x;
			this:y = y;
		}
	}
	
	class Point2 is CanEqual<Point2>
	{
		get int x;
		get int y;
		
		public create(int x, int y)
		{
			this:x = x;
			this:y = y;
		}
		
		public readonly equal(Point2 other) => (boolean)
		{
			return (x == other->x and y == other->y);
		}
	}

	public main(String[] args) => ()
	{
		var comp1 = DefaultEqualizer<Point1>:create();
		var comp2 = DefaultEqualizer<Point2>:create();
		var comp3 = DefaultEqualizer<Point>:create();

		var p1 = Point1:create(1, 1);
		var p2 = Point1:create(1, 1);
		var p3 = Point1:create(2, 2);

		Console.printLine(comp1.equal(p1, p1));
		Console.printLine(!comp1.equal(p1, p2));
		Console.printLine(!comp1.equal(p1, p3));

		var p4 = Point2:create(1, 1);
		var p5 = Point2:create(1, 1);
		var p6 = Point2:create(2, 2);

		Console.printLine(comp2.equal(p4, p4));
		Console.printLine(comp2.equal(p4, p5));
		Console.printLine(!comp2.equal(p4, p6));

		Console.printLine(comp3.equal(Point:create(1, 1), Point:create(1, 1)));		
	}
}