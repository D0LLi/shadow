import shadow:io@Console;
import shadow:natives;

class shadow:test@SignalerTest
{
    [ImportNative]
	private readonly initSignaler() => ();

	[ImportNative]
	private readonly get staticSignaler() => (Signaler);
	
	class RunnableTest is CanRun 
	{
		public run() => () {
			var signaler = staticSignaler();
			
			Console.printLine(CurrentThread->name # ": " # "waiting!");
			if(CurrentThread->id != 3) {
				signaler.waitForNotify();
			} else {
				signaler.waitForNotify(100);				
			}
			Console.printLine(CurrentThread->name # ": " # "finished waiting!");
		}
	}

	public main(String[] args) => ()
	{
		initSignaler();
		var signaler = staticSignaler();

		nullable var threads = Thread:null[5];
		for(int i = 0; i < threads->size; i += 1) {
			threads[i] = spawn(RunnableTest:());
			signaler.waitForTimeout(500);
		}
		
		for(int i = 0; i < threads->size; i += 1) {
			signaler.notify();
			signaler.waitForTimeout(500);
		}
	}
	
	private createSignalerNative() => (Signaler)
	{
		return Signaler:create();
	}
}