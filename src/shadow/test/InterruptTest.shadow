import shadow:io@Console;

class shadow:test@InterruptTest
{
	class ThreadSleepTestRunner is CanRun
	{
		public run() => ()
		{
			Console.printLine("waiting");
			CurrentThread.sleep(Time.fromSeconds(10));
			Console.printLine("done");
		}
	}
	
	class ThreadTestRunner is CanRun
	{
		public run() => ()
		{
			Console.printLine("I am " # CurrentThread->name);

			var index = receive<int>(CurrentThread->main);
			Console.printLine(CurrentThread->name # ": " # index);
			CurrentThread->main[index].join();

			Console.printLine("I should quit before reaching this" # CurrentThread->name);
		}
	}

	public main(String[] args) => ()
	{
		spawn(ThreadSleepTestRunner:()); // 0
		
		spawn(ThreadTestRunner:()); // 1
		send(0, CurrentThread[1]);
		
		spawn(ThreadTestRunner:()); // 2
		send(1, CurrentThread[2]);
		
		CurrentThread.sleep(Time.fromSeconds(4));
		CurrentThread[1].interrupt();
		Console.printLine("end");
		
		try {
			CurrentThread[2].join();
		} catch(ThreadException e) {
			if(e->actual is InterruptedException) {
				Console.printLine("InterruptedException thrown");
			} else {
				throw e;
			}
		}
		
		var now = Time.epochNow();
		CurrentThread[0].join(Time.fromSeconds(1));
		now = Time.epochNow() - now;
		Console.printLine(now->seconds);
	}
}