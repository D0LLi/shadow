import shadow:io@Console;

class shadow:test@ThreadTest
{
	class ThreadTestRunner is CanRun
	{
		public run() => ()
		{
			var id = Thread:Current->instance->id;
			Thread:Current.sleep(id * 50);
			Console.printLine(Thread:Current->instance);
			
			if(id == 4) {
				spawn(ThreadTestRunner:()).join(); // Thread#5; throws from Thread#6
			}
			else if(id == 5) {
				Console.printLine(check(Thread:Current->instance->parent)->id == 4);
				Console.printLine(Thread:Current->main->id == check(check(Thread:Current->instance->parent)->parent)->id);
				
				spawn(ThreadTestRunner:()).join(); // Thread#6; throws from Thread#8
			}
			else if(id == 6) {
				spawn(ThreadTestRunner:()); // Thread#7; does not throw until joined
				spawn(ThreadTestRunner:()).join(); // Thread#8; throws and propagates
			}
			
			if(id > 2) {
				throw Exception:create("from " # Thread:Current->instance);
			}
		}
	}

	public main(String[] args) => ()
	{
		var runner = ThreadTestRunner:create();
		runner.run(); // print main

		nullable var threads = Thread:null[4];
		for (int i = 0; i < threads->size; i += 1) {
			threads[i] = spawn(ThreadTestRunner:());
		}

		// if we do not join here, Shadow should join on all threads
	}
}