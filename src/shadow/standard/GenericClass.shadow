/**
 * {@code GenericClass} objects are used to hold the type information for all
 * Shadow objects that have a parameterized type, including arrays. This
 * class adds the extra functionality to {@code Class} objects needed to
 * handle type-casts and allocations for objects with paramterized types.
 */
immutable class shadow:standard@
	GenericClass is Class
{	
	get Class[] parameters; //class data
	/// @unused
	MethodTable[] tables;   //method tables for each class 
	
	/**
	 * Creates a new {@code GenericClass} object with the given name, flags,
	 * size, parent, interfaces, interface method tables, and type parameters.
	 * This method is never expected to be called.	 
	 * @param name name of the class
	 * @param flags flags specifying the kind of type
	 * @param size size required for an object whose type is given by this class
	 * @param parent parent class
	 * @param interfaces interface classes supported by this class
	 * @param data method tables associated with each interface
	 * @param parameters array of type parameters
	 * @param parameters array of associated method tables		 	  
	 */
	protected create(String name, int flags, int size, nullable Class parent, immutable Class[] interfaces, immutable MethodTable[] interfaceTables, immutable Class[] parameters, immutable MethodTable[] tables )
	{
		super(name, flags, size, parent, interfaces, interfaceTables);
		this:parameters = parameters;
		this:tables = tables;	
	}
	
	
	/**
	 * Returns the name of the current class.	 
	 * @return name of the class
	 */
	public readonly toString() => ( String )
	{
		if( isArray() ) {
			Class base = parameters[0];
			if( base.isArray() )
				return #base # "[]";
			else
			//for arrays, name contains either "" or "nullable ", depending
			//on whether or not the array type is nullable
				return this->name # base # "[]";
		}			
		else {
			var string = MutableString:create( this->name );
			string.append("<");
			//It seems like a bug that we're looking at the size of tables
			//but are then pulling from parameters.
			//Tables gives the total number of type parameters, but
			//parameters may have additional class objects after the
			//type parameters.
			for( int i = 0; i < tables->size; i += 1 ) {
				if( i > 0 )
					string.append(",");				
				string.append(#parameters[i]);				
			}
			string.append(">");
			return #string;
		}  
	}
}
