/**
 * {@code BigInteger} objects are immutable representations of arbitrarily
 * large positive and negative integers.
 * They support standard arithmetic operations such as addition, subtraction,
 * multiplication, division, modulus, and comparison.
 */
locked immutable class shadow:standard@
	BigInteger
is  Number<BigInteger>
and CanHash
{
	/* Internal representation is in base 4294967296 with the array index giving the power.
	 * Index 0 is the least significant digit. 
	 */ 
	uint[] data;
	boolean negative;
	
	private constant ulong BASE = 4294967296uL;
	
	/**
	 * Compares the current object to another {@code BigInteger}, returning {@code true}
	 * if they represent the same integer.
	 * @param other object to compare to
	 * @return {@code true} if identical
	 */
	public equal(BigInteger other) => (boolean)
	{
		return compare(other) == 0;
	}
	
	/**
	 * Compares the current object to another {@code BigInteger}, returning {@code -1},
	 * {@code 0}, or {@code 1}, if the current object is smaller than, equal to, or larger
	 * than the other object, respectively.
	 * @param other object to compare to
	 * @return whether smaller, equal, or larger
	 */	
	public compare(BigInteger other) => (int)
	{
		if( negative )
		{
			if( other:negative )
				return -unsignedCompare( data, other:data );
			else
				return -1;		
		}
		else
		{
			if( other:negative )
				return 1;
			else
				return unsignedCompare( data, other:data );
		}	
	}
	
	/**
	 * Adds another {@code BigInteger} to the current object and returns the resulting value.	 
	 * @param other object to add
	 * @return sum of the two values
	 */
	public add(BigInteger other) => (BigInteger)
	{
		if( negative == other:negative )
			return BigInteger:create( unsignedAdd(data, other:data), negative );
			
		//opposite signs
		int comparison = unsignedCompare(data, other:data);
		if( comparison > 0 )
			return BigInteger:create( unsignedSubtract(data, other:data), negative );
		else if( comparison < 0 )
			return BigInteger:create( unsignedSubtract(other:data, data), other:negative);
		else
			return BigInteger:create( 0 );		
	}
	
	/**
	 * Subtracts another {@code BigInteger} from the current object and returns the
	 * resulting value.	 
	 * @param other object to subtract
	 * @return difference of the two values
	 */
	public subtract(BigInteger other) => (BigInteger)
	{
		if( negative != other:negative )
			return BigInteger:create( unsignedAdd(data, other:data), negative );
			
		//same signs
		int comparison = unsignedCompare(data, other:data);
		if( comparison > 0 )
			return BigInteger:create( unsignedSubtract(data, other:data), negative );
		else if( comparison < 0 )
			return BigInteger:create( unsignedSubtract(other:data, data), !other:negative);
		else
			return BigInteger:create( 0 );		
	}
	
	/**
	 * Multiplies the current object by another {@code BigInteger} and returns the
	 * resulting value.	
	 * @param other object to multiply 
	 * @return product of the two values
	 */
	public multiply(BigInteger other) => (BigInteger)
	{	
		return BigInteger:create( unsignedMultiply( data, other:data), negative xor other:negative );	
	}
	
	/* Performs real work of unsigned multiplication used as a helper for signed multiplication. */
	private unsignedMultiply(readonly uint[] first, readonly uint[] second) => (readonly uint[])
	{
		uint[] result = uint:create[first->size + second->size];
		for( int i = 0; i < first->size; i += 1 )
		{		
			if( first[i] > 0u )
			{
				ulong carry = 0uL;
				ulong product = 0uL;
			
				for( int j = 0; j < second->size; j += 1 )
				{
					product = cast<ulong>(first[i])*second[j] + result[i + j] + carry ;
					carry = product / BASE;
					result[i + j] = cast<uint>(product % BASE);
				}
				
				//never happens the last time
				if( carry > 0L )
					result[i + second->size] = cast<uint>(carry);
			}															
		}
		
		return removeZeroes(result);
	}
	
	/**
	 * Divides the current object by another {@code BigInteger} and returns the
	 * quotient.	
	 * @param other object to divide by 
	 * @return quotient of the division
	 */
	public divide(BigInteger other) => (BigInteger)
	{
		int comparison = unsignedCompare(data, other:data);
		if( comparison < 0 )
			return BigInteger:create( 0 );
		
		if( comparison == 0 )
			return BigInteger:create( (negative xor other:negative ? -1 , 1) );
			
		(readonly uint[] quotient, ) = unsignedDivide( data, other:data );
					
		return BigInteger:create( quotient, negative xor other:negative );
	}
	
	/**
	 * Divides the current object by another {@code BigInteger} and returns the
	 * remainder.
	 * @param other object to divide by	 
	 * @return remainder of the division
	 */
	public modulus(BigInteger other) => (BigInteger)
	{
		int comparison = unsignedCompare(data, other:data);
		if( comparison < 0 )
			return this;
		
		if( comparison == 0 )
			return BigInteger:create( 0 );
			
		(, readonly uint[] remainder) = unsignedDivide( data, other:data );
		
		if( remainder->size == 1 and remainder[0] == 0u )
			return BigInteger:create( 0 );
		
		return BigInteger:create( remainder, negative );
	}	
	
	/* 
	 * Performs an unsigned left bit shift on the array of {@code uint} values that is
	 * the underlying representation of a {@code BigInteger}.
	 * Because of its use in division, removeZeroes() is not called, meaning that the
	 * result may have padding zeroes.
	 */
	private unsignedLeftShift(readonly uint[] data, uint amount) => (readonly uint[])
	{	
		int jump = cast<int>(amount / 32u);
		int shift = cast<int>(amount % 32u);
		uint[] result = uint:create[data->size + jump + 1];

		result[result->size - 1] = data[result->size - 1 - jump - 1] >> (32 - shift);
		for( int i = jump + 1; i < result->size - 1; i += 1 )
			result[i] = (data[i - jump] << shift) | (data[i - jump - 1] >> (32 - shift));
		result[jump] = data[0] << shift;
		for( int i = 0; i < jump; i += 1 )
			result[i] = 0u;
			
		return result;
	}
	
	/* 
	 * Performs an unsigned right bit shift on the array of {@code uint} values that is
	 * the underlying representation of a {@code BigInteger}.
	 * Because of its use in division, removeZeroes() is not called, meaning that the
	 * result may have padding zeroes.
	 */
	private unsignedRightShift(readonly uint[] data, uint amount) => (readonly uint[])
	{	
		int jump = cast<int>(amount/32u);
		int shift = cast<int>(amount%32u);
		uint[] result = uint:create[(data->size - jump).max(1)];
		for( int i = 0; i < result->size - 1; i += 1 )
			result[i] = (data[i + jump] >> shift) | (data[i + jump + 1] << (32 - shift));
		if( data->size > jump )
			result[result->size - 1] = data[data->size - 1] >> shift;
		else
			result[result->size - 1] = 0u;
			
		return result;
	}
	
	/* 
	 * Performs an unsigned divide of the first representation by the second representation.
	 * Method assumes that {@code first} is no smaller than {@code second}.
	 */
	private unsignedDivide(readonly uint[] first, readonly uint[] second) => (readonly uint[] quotient, readonly uint[] remainder)
	{
		uint[] quotient = uint:create[first->size - second->size + 1];		
		ulong value;
		
		if( isZero( second ) )
			throw IllegalArgumentException:create("Division by zero");
			
		if( second->size == 1 ) //single digit divisor is handled specially
		{
			value = 0uL;
			ulong divisor = second[0];
			for( int i = first->size - 1; i >= 0; i -= 1 )
			{
				quotient[i] = cast<uint>((value*BASE + first[i])/divisor);
				value = (value*BASE	 + first[i]) - quotient[i]*divisor;			
			}
			
			uint[] remainder = uint:create[1];
			remainder[0] = cast<uint>(value);
			
			return (removeZeroes(quotient), remainder );		
		}
		
		uint zeroes = second[second->size - 1].leadingZeroes();
		readonly uint[] normalizedDivisor = 	unsignedLeftShift( second, zeroes );
		readonly uint[] normalizedData = 	unsignedLeftShift( first, zeroes );
		ulong quotientEstimate; 
		ulong remainderEstimate;		
		long test;
		long carry;
	
		for( int i = first->size - second->size; i >= 0; i -= 1 )
		{
			if( i + second->size >= normalizedData->size )
				value = normalizedData[i + second->size - 1];
			else				
				value = normalizedData[i + second->size]*BASE + normalizedData[i + second->size - 1];
			quotientEstimate = value/normalizedDivisor[second->size - 1]; 			
			remainderEstimate = value - quotientEstimate*normalizedDivisor[second->size - 1];
			
			while( quotientEstimate >= BASE or
				   quotientEstimate*normalizedDivisor[second->size - 2] > BASE*remainderEstimate + normalizedData[i + second->size - 2] )
			{
				quotientEstimate  -= 1uL;
				remainderEstimate += normalizedDivisor[second->size - 1];
				
				if( remainderEstimate >= BASE )
					break;			
			}
		
			carry = 0L;
			for( int j = 0; j < second->size; j += 1 )
			{
				value = quotientEstimate * normalizedDivisor[j];
				test = cast<long>(normalizedData[i + j]) - carry - cast<long>(value & 0xFFFFFFFFuL);  
				normalizedData[i + j] = cast<uint>(test);
				carry = cast<long>(value >> 32) - (test >> 32);
			}
			test = cast<long>(normalizedData[i + second->size]) - carry;  
			normalizedData[i + second->size] = cast<uint>(test);

			quotient[i] = cast<uint>(quotientEstimate);
			
			if( test < 0L )
			{						
				quotient[i] -= 1u;
				carry = 0L;
				
				for( int j = 0; j < second->size; j += 1 )
				{
					test = carry + normalizedData[i + j] + normalizedDivisor[j];
					normalizedData[i + j] = cast<uint>(test);
					carry = test / cast<long>(BASE);				
				}
				
				normalizedData[i + second->size] += cast<uint>(carry);
			}
		}		

		return (removeZeroes(quotient), unsignedRightShift(normalizedData, zeroes));
	}
	
	/**
	 * Creates a new {@code BigInteger} with the given {@code int} value.
	 * @param value value of new object 
	 */
	public create(int value)
	{
		uint[] temp = uint:create[1]; 
		temp[0] = value.abs();		
		data = freeze(temp);
		negative = value < 0;			
	}
	
	/**
	 * Creates a new {@code BigInteger} with the given {@code ulong} value.
	 * @param value value of new object 
	 */
	public create(ulong value)
	{	
		uint[] temp;
		
		if( value >= BASE )
		{
			temp = uint:create[2];
			temp[1] = cast<uint>(value / BASE); 
			temp[0] = cast<uint>(value % BASE);					
		}
		else
		{
			temp = uint:create[1];			 
			temp[0] = cast<uint>(value);		
		}		
		
		data = freeze(temp);
	}
	
	/**
	 * Creates a new {@code BigInteger} with the given {@code long} value.
	 * @param value value of new object 
	 */
	public create(long value)
	{		
		ulong magnitude = value.abs();		
		uint[] temp;
		if( magnitude >= BASE )
		{	
			temp = uint:create[2];			
			temp[1] = cast<uint>(magnitude / BASE); 
			temp[0] = cast<uint>(magnitude % BASE);					
		}
		else
		{
			temp = uint:create[1];			 
			temp[0] = cast<uint>(magnitude);		
		}		
		data = freeze(temp);
		negative = value < 0L;
	}
	
	/**
	 * Creates a new {@code BigInteger} whose value is represented as text in base 10
	 * by {@code value}.
	 * @param value {@code String} representation of new object 
	 */
	public create(String value)
	{
		this(value, 10u);	
	}
	
	/**
	 * Creates a new {@code BigInteger} whose value is represented as text in base {@code base}
	 * by {@code value}. 
	 * @param value {@code String} representation of new object
	 * @param base base of representation
	 */
	public create(String value, uint base)
	{	
	
		if( base < 2u or base > 36u )
			throw IllegalArgumentException:create("Invalid base: " # base);
	
		ulong initial = 0uL;		
		int i = 0;
		if( value->size > 0 and value[i] == '-' )
		{
			negative = true;
			i += 1;
		}
		
		// Try to fit into a single "digit".				
		while( i < value->size and initial < BASE )
		{
			initial *= base;
			initial += digitValue( value[i], base );
			i += 1;					
		}
		
		uint[] values;
		readonly uint[] holder;  // Necessary because of readonly issues.
	
		if( initial < BASE )
		{
			values = uint:create[1];
			values[0] = cast<uint>(initial);
			holder = values;
		}
		else
		{
			// Undo last operation.
			i -= 1;
			initial -= digitValue( value[i], base );
			initial /= base;
			values = uint:create[1];
			values[0] = cast<uint>(initial);
			uint[] baseRepresentation = uint:create[1];
			baseRepresentation[0] = base;
			uint[] digitRepresentation = uint:create[1];
			
			holder = values;		
			
			while( i < value->size )
			{
				holder = unsignedMultiply( holder, baseRepresentation );
				digitRepresentation[0] = digitValue( value[i], base );				
				holder = unsignedAdd( holder, digitRepresentation );
				i += 1;			
			}
		}		
		
		data = freeze(holder);
	}
	
	/* Finds numerical value of letter in a given base. */
	private digitValue(ubyte letter, uint base) => (uint)
	{
		uint value = 0u;
	
		if( letter >= '0' and letter <= '9' )
			value = cast<uint>(letter - '0');
		else if( letter >= 'A' and letter <= 'Z' )
			value = cast<uint>(letter - 'A' + 10);
		else if( letter >= 'a' and letter <= 'z' )
			value = cast<uint>(letter - 'a' + 10);
		else
			throw IllegalArgumentException:create("Invalid digit: " # letter);
			
		if( value >= base )
			throw IllegalArgumentException:create("Invalid digit: " # letter);
			
		return value;
	}
	
	/* 
	 * Compares an underlying unsigned representation to another unsigned representation,
	 * returning {@code -1}, {@code 0}, or {@code 1}, if the first representation is smaller
	 * than, equal to, or larger than the other representation, respectively.
	 */
	private unsignedCompare(readonly uint[] data, readonly uint[] other) => (int)
	{
		if( data->size < other->size )
			return -1;
		
		if( data->size > other->size )
			return 1;
			
		for( int i = data->size - 1; i >= 0; i -= 1 )
		{
			if( data[i] < other[i] )
				return -1;
			else if( data[i] > other[i] )
				return 1;
		}
		
		return 0;
	}
	
	/* 
	 * Adds an underlying unsigned representation to another unsigned representation.
	 */
	private unsignedAdd(readonly uint[] first, readonly uint[] second) => (readonly uint[])
	{
		uint[] result = uint:create[first->size.max(second->size) + 1];
		ulong carry = 0uL;
		ulong sum = 0uL;
		for( int i = 0; i < result->size; i += 1 )
		{
			sum = carry;
			if( i < first->size )
				sum += first[i];
			if( i < second->size )
				sum += second[i];
			carry = sum / BASE;
			result[i] = cast<uint>(sum % BASE);								
		}
		
		return removeZeroes( result );
	}
	
	/* 
	 * Subtracts the second unsigned representation from the first unsigned representation.
	 * Method assumes that second is never larger than first.
	 */ 
	private unsignedSubtract(readonly uint[] first, readonly uint[] second) => (readonly uint[] )
	{
		uint[] result = uint:create[first->size];
		ulong borrow = 0uL;
		ulong subtract = 0uL;
		for( int i = 0; i < result->size; i += 1 )
		{
			subtract = borrow;			
			if( i < second->size )
				subtract += second[i];
			if( subtract <= first[i] )
			{
				result[i] = cast<uint>(first[i] - subtract);
				borrow = 0uL;
			}
			else
			{
				result[i] = cast<uint>(BASE + first[i] - subtract);
				borrow = 1uL;
			}				
		}
		
		return removeZeroes( result );
	}
	
	/* 
	 * Creates a {@code BigInteger} with the given representation and negative sign.
	 */ 
	private create( readonly uint[] data, boolean negative )
	{
		this:data = freeze(data);
		this:negative = negative;	
	}
	
	/* 
	 * Removes padding zeroes from the more significant digits (the "left" side of the number,
	 * where the zeroes have no meaning). 
	 */ 
	private removeZeroes( readonly uint[] values ) => ( readonly uint[] )
	{
		int zeroes = 0;
		int index = values->size - 1; 
		while( index >= 0 and values[index] == 0 )
		{
			zeroes += 1;
			index -= 1;
		}
			
		if( zeroes == values->size )
			zeroes -= 1;
			
		if( zeroes > 0 )
			return cast<uint[]>(values.subarray( 0, values->size - zeroes ));
		
		return values;
	}
	
	/** 
	 * Returns a {@code String} representation of the object, in base 10.
	 * @return  {@code String} representation
	 */ 
	public toString() => (String)
	{
		return toString(10u);	
	}
	
	/** 
	 * Returns a {@code String} representation of the object, in the specified base.
	 * @param base base of output representation
	 * @return  {@code String} representation
	 */ 	
	public toString(uint base) => (String)
	{
		if( base < 2u or base > 36u )
			throw IllegalArgumentException:create("Invalid base: " # base);
		
		if( isZero(data) )
			return "0";
			
		MutableString buffer = MutableString:create();
				
		if( negative )
			buffer.append("-");			
			
		if( data->size == 1 )
			return buffer.append( data[0].toString(base) ).toString();
			
		BigInteger divisor = BigInteger:create(base.toInt());
		
		readonly uint[] number = data;
		readonly uint[] quotient;		
		readonly uint[] remainder;
				
		do
		{
			(quotient, remainder) = unsignedDivide( number, divisor:data );			
		
			uint digit = remainder[0]; 
			
			if( digit >= 10u ) // A through Z
				buffer.append(cast<ubyte>(digit + 'A' - 10u));
			else
				buffer.append(cast<ubyte>(digit + '0'));
				
			number = quotient;				
		} while( !isZero( number ) );
				
		return buffer.reverse().toString();
	}
	
	/* 
	 * Determines whether the data represents the integer 0.	 
	 */
	private isZero(readonly uint[] data) => (boolean)
	{
		return data->size == 1 and data[0] == 0u;
	}
	
	/** 
	 * Converts the object to a {@code byte} value, possibly overflowing.
	 * @return {@code byte} value	 
	 */
	public toByte() => (byte)
	{
		return cast<byte>(toInt());
	}
	
	/** 
	 * Converts the object to a {@code ubyte} value, possibly overflowing.
	 * @return {@code ubyte} value	 
	 */
	public toUByte() => (ubyte)
	{
		return cast<ubyte>(data[0]);
	}
	
	/** 
	 * Converts the object to a {@code short} value, possibly overflowing.
	 * @return {@code short} value	 
	 */
	public toShort() => (short)
	{
		return cast<short>(toInt());
	}
	
	/** 
	 * Converts the object to a {@code ushort} value, possibly overflowing.
	 * @return {@code ushort} value	 
	 */
	public toUShort() => (ushort)
	{
		return cast<ushort>(data[0]);
	}
	
	/** 
	 * Converts the object to an {@code int} value, possibly overflowing.
	 * @return {@code int} value	 
	 */
	public toInt() => (int)
	{
		return (negative ? -1 , 1 ) * cast<int>(data[0]);
	}
	
	/** 
	 * Converts the object to a {@code uint} value, possibly overflowing.
	 * @return {@code uint} value	 
	 */
	public toUInt() => (uint)
	{
		return data[0];
	}
	
	/** 
	 * Converts the object to a {@code long} value, possibly overflowing.
	 * @return {@code long} value	 
	 */
	public toLong() => (long)
	{
		return (negative ? -1L , 1L ) * cast<long>(toULong());
	}
	
	/** 
	 * Converts the object to a {@code ulong} value, possibly overflowing.
	 * @return {@code ulong} value	 
	 */
	public toULong() => (ulong)
	{
		ulong value = data[0];
		if( data->size > 1 )
			value += data[1] * BASE;
		return value;	
	}
	
	/** 
	 * Converts the object to a {@code code} value, possibly overflowing.
	 * @return {@code code} value	 
	 */
	public toCode() => (code)
	{
		return cast<code>(data[0]);	
	}	
	
	/** 
	 * Converts the object to a {@code float} value.
	 * @return {@code float} value	 
	 */
	public toFloat() => (float)
	{
		return cast<float>( toDouble() );
	}
	
	
	/** 
	 * Converts the object to a {@code double} value.
	 * @return {@code double} value	 
	 */		
	public toDouble() => (double)
	{
		double total = 0.0;
		
		for( int i = data->size - 1; i >= 0; i -= 1 )
		{
			total *= BASE;
			total += data[i];		
		}
		
		return negative ? -total , total; 
	}
	
	/** 
	 * Returns a non-negative version of the object.
	 * @return non-negative value	 
	 */
	public abs() => (BigInteger)
	{
		if( negative )
			return BigInteger:create(data, false);
			
		return this;
	}

	/** 
	 * Negates the object.
	 * @return negated value	 
	 */	
	public negate() => (BigInteger)
	{
		return BigInteger:create(data, !negative);	
	}
	
	/** 
	 * Finds the minimum of the current object and another {@code BigInteger}.
	 * @param other object
	 * @return minimum value	 
	 */
	public min(BigInteger other) => (BigInteger)
	{
		if( compare(other) < 0 )
			return this;
		else
			return other;	
	}
	
	/** 
	 * Finds the maximum of the current object and another {@code BigInteger}.
	 * @param other object
	 * @return maximum value	 
	 */
	public max(BigInteger other) => (BigInteger)
	{
		if( compare(other) > 0 )
			return this;
		else
			return other;	
	}
	
	/** 
	 * Finds the result of left-shifting the bits of the integer value that is represented.
	 * @param amount bits to shift
	 * @return shifted value	 
	 */
	public bitShiftLeft(int amount) => (BigInteger)
	{
		uint abs = amount.abs();
		if( amount > 0 )
			return BigInteger:create( removeZeroes(unsignedLeftShift(data, abs)), negative );
		else if( amount < 0 )
			return BigInteger:create( removeZeroes(unsignedRightShift(data, abs)), negative );
		else
			return this;			
	}
	
	/** 
	 * Finds the result of right-shifting the bits of the integer value that is represented.
	 * @param amount bits to shift
	 * @return shifted value	 
	 */
	public bitShiftRight(int amount) => (BigInteger)
	{
		uint abs = amount.abs();
		if( amount > 0 )
			return BigInteger:create( removeZeroes(unsignedRightShift(data, abs)), negative );
		else if( amount < 0 )
			return BigInteger:create( removeZeroes(unsignedLeftShift(data, abs)), negative );
		else
			return this;			
	}
	
	/** 
	 * Finds a hash value for the current object.	 
	 * @return hash value	 
	 */
	public hash() => (uint)
	{
		uint value = 0u;
		
		for( int i = 0; i < data->size; i += 1 )
			value = 31u*value + data[i];
			
		return negative ? ~value, value;	
	}
	
	/** 
	 * Raises the current object to the power of another {@code BigInteger}.
	 * @param exponent power to raise by	 
	 * @return number after exponentiation
	 */
	public power(BigInteger exponent) => (BigInteger)
	{
		if( exponent:negative )
			throw IllegalArgumentException:create("Negative exponent: " # exponent);
		
		// Even 0 raised to 0 is given as 1 here, like in Java.
		if( isZero( exponent:data ) )
			return BigInteger:create(1);
		
			
		if( exponent:data->size == 1 and exponent:data[0] == 1u )
			return this;
		
		BigInteger halfExponent = exponent.bitShiftRight(1);	
		BigInteger halfPower = power( halfExponent );
		BigInteger fullPower = halfPower.multiply(halfPower);
		
		if( exponent:data[0] % 2u == 1u )
		  	fullPower = fullPower.multiply( this );
		  	
		return fullPower; 
	}
	
	/** 
	 * Raises the current object to the power of another {@code BigInteger} then finds
	 * its value modulus a divisor.
	 * @param exponent power to raise by	 
	 * @param divisor value to modulo by
	 * @return number after exponentiation and modulus
	 */
	public modulusPower(BigInteger exponent, BigInteger divisor) => (BigInteger)
	{
		if( divisor:negative or isZero(divisor:data) )
			throw IllegalArgumentException:create("Negative modulus: " # divisor);
			
		if( exponent:negative )		
			exponent = divisor.subtract( exponent );
			
		if( exponent.compare( divisor ) >= 0 )
			exponent = exponent.modulus(divisor);
		
		if( isZero( exponent:data ) )
			return BigInteger:create(1);
			
		if( exponent:data->size == 1 and exponent:data[0] == 1u )
			return this.modulus(divisor);
		
		BigInteger halfExponent = exponent.bitShiftRight(1);	
		BigInteger halfPower = modulusPower( halfExponent, divisor );
		BigInteger fullPower = halfPower.multiply(halfPower);
		
		if( exponent:data[0] % 2u == 1u )
		  	fullPower = fullPower.multiply( this );
		  	
		return fullPower.modulus(divisor); 
	}
}