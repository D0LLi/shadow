/**
 * Class {@code float} contains the methods that can be called on
 * {@code float} values.
 */
locked immutable class shadow:standard@
	Float
is  FloatingPoint<float>
and	Number<double>
and	CanHash
{
	/**
	 * Closest {@code float} to the mathematical constant pi, the ratio of a
	 * circle's circumference to its diameter, approximately 3.1415927.
	 */
	public constant float PI = 3.1415927f;
	
	/**
	 * Closest {@code float} to the mathematical constant e, the base of the 
	 * natural logarithm, approximately 2.7182817.
	 */
	public constant float E = 2.7182817f;

	/**
	 * Constant representing one of the 32-bit not-a-number values supported
	 * by the IEEE 754 standard.
	 */
	public constant float NaN = 0f / 0f;
	
	/**
	 * Constant representing positive infinity with 32 bits in the IEEE 754
	 * standard.
	 */
	public constant float INFINITY = 1f / 0f;
	
	/**
	 * Constant representing negative infinity with 32 bits in the IEEE 754
	 * standard.
	 */
	public constant float NEGATIVE_INFINITY = -1f / 0f;

	/* Constants used to manipulate the raw bit form of the float value. */
	
	private constant uint SIGN_MASK = 0x80000000u;
	private constant uint EXPONENT_MASK = 0x78000000u;
	private constant uint SIGNIFICAND_MASK = 0x7ffffffu;

	// Methods for Number
	
	/** 
	 * Converts the {@code float} value to a {@code byte}, which will overflow
	 * if the value is too large to be contained in a {@code byte}. 	 
	 * @return {@code byte} value 
	 */
	[ImportNative]
	public toByte() => (byte);
	
	/** 
	 * Converts the {@code float} value to a {@code ubyte}, which will overflow
	 * if the value is too large to be contained in a {@code ubyte}. 	 
	 * @return {@code ubyte} value 
	 */
	[ImportNative]
	public toUByte() => (ubyte);
	
	/** 
	 * Converts the {@code float} value to a {@code short}, which will overflow
	 * if the value is too large to be contained in a {@code short}. 	 
	 * @return {@code short} value 
	 */
	[ImportNative]
	public toShort() => (short);
	
	/** 
	 * Converts the {@code double} value to a {@code ushort}, which will overflow
	 * if the value is too large to be contained in a {@code ushort}. 	 
	 * @return {@code ushort} value 
	 */
	[ImportNative]
	public toUShort() => (ushort);
	
	/** 
	 * Converts the {@code float} value to an {@code int}, which will overflow
	 * if the value is too large to be contained in an {@code int}. 	 
	 * @return {@code int} value 
	 */
	[ImportNative]
	public toInt() => (int);
	
	/** 
	 * Converts the {@code float} value to a {@code uint}, which will overflow
	 * if the value is too large to be contained in a {@code uint}. 	 
	 * @return {@code uint} value 
	 */
	[ImportNative]
	public toUInt() => (uint);
	
	/** 
	 * Converts the {@code float} value to a {@code long}, which will overflow
	 * if the value is too large to be contained in a {@code long}. 	 
	 * @return {@code long} value 
	 */
	[ImportNative]
	public toLong() => (long);
	
	/** 
	 * Converts the {@code float} value to a {@code ulong}, which will overflow
	 * if the value is too large to be contained in a {@code ulong}. 	 
	 * @return {@code ulong} value 
	 */
	[ImportNative]
	public toULong() => (ulong);
	
	/** 
	 * Converts the {@code float} value to a {@code code}, which will overflow
	 * if the value is too large to be contained in a {@code code}. 	 
	 * @return {@code code} value 
	 */
	[ImportNative]
	public toCode() => (code);
	
	/** 
	 * Converts the {@code float} value to a {@code float}, which involves
	 * no change. 	 
	 * @return {@code float} value 
	 */
	[ImportNative]
	public toFloat() => (float);
	
	/** 
	 * Converts the {@code float} value to a {@code double}. 	 
	 * @return {@code double} value 
	 */
	[ImportNative]
	public toDouble() => (double);

	// Method for CanAdd<float>
	/**
	 * Adds another {@code float} to the current value and returns the resulting value.	 
	 * @param other value to add
	 * @return sum of the two values
	 */
	[ImportNative]
	public add(float other) => (float);
	
	// Method for CanSubtract<float>
	/**
	 * Subtracts another {@code float} from the current value and returns the resulting value.	 
	 * @param other value to subtract
	 * @return difference of the two values
	 */
	[ImportNative]
	public subtract(float other) => (float);
	
	// Method for CanMultiply<float>
	/**
	 * Multiplies the current value by another {@code float} and returns the resulting value.	 
	 * @param other value to multiply by
	 * @return product of the two values
	 */
	[ImportNative]
	public multiply(float other) => (float);
	
	// Method for CanDivide<float>
	/**
	 * Divides the current value by another {@code float} and returns the quotient.	 
	 * @param other value to divide by
	 * @return quotient of the division
	 */
	[ImportNative]
	public divide(float other) => (float);
	
	// Method for CanModulus<float>
	/**
	 * Divides the current value by another {@code float} and returns the remainder.	 
	 * @param other value to divide by
	 * @return remainder of the division
	 */
	[ImportNative]
	public modulus(float other) => (float);
	
	// Method for CanCompare<float>
	/**
	 * Compares the current value to another {@code float}, returning {@code -1},
	 * {@code 0}, or {@code 1}, if the current value is smaller than, equal to, or larger
	 * than the other value, respectively.
	 * @param other value to compare to
	 * @return whether smaller, equal, or larger
	 */	
	[ImportNative]
	public compare(float other) => (int);
	
	// Method for CanEqual<float>
	/**
	 * Compares the current value to another {@code float}, returning {@code true}
	 * if they represent the same number.
	 * @param other value to compare to
	 * @return {@code true} if identical
	 */
	[ImportNative]
	public equal(float other) => (boolean);

	// Method for CanAdd<double>
	/**
	 * Adds a {@code double} to the current value and returns the resulting {@code double}.	 
	 * @param other value to add
	 * @return sum of the two values
	 */
	public add(double other) => (double)
	{
		return cast<double>(this) + other;
	}
	
	// Method for CanSubtract<double>
	/**
	 * Subtracts a {@code double} from the current value and returns the resulting {@code double}.	 
	 * @param other value to subtract
	 * @return difference of the two values
	 */
	public subtract(double other) => (double)
	{
		return cast<double>(this) - other;
	}
	
	// Method for CanMultiply<double>
	/**
	 * Multiplies the current value by a {@code double} and returns the resulting {@code double}.	 
	 * @param other value to multiply by
	 * @return product of the two values
	 */
	public multiply(double other) => (double)
	{
		return cast<double>(this) * other;
	}
	// Method for CanDivide<double>
	/**
	 * Divides the current value by a {@code double} and returns the quotient.	 
	 * @param other value to divide by
	 * @return quotient of the division
	 */
	public divide(double other) => (double)
	{
		return cast<double>(this) / other;
	}
	
	// Method for CanModulus<double>
	/**
	 * Divides the current value by a {@code double} and returns the remainder.	 
	 * @param other value to divide by
	 * @return remainder of the division
	 */
	public modulus(double other) => (double)
	{
		return cast<double>(this) % other;
	}
	// Method for CanCompare<double>
	public compare(double other) => (int)
	{
		return cast<double>(this).compare(other);
	}
	// Method for CanEqual<double>
	public equal(double other) => (boolean)
	{
		return cast<double>(this) == other;
	}
	
	// Other math operations
	
	/** 
	 * Finds the square root of the value.
	 * @return square root	 
	 */
	[ImportNative]
	public squareRoot() => (float);
	
	/** 
	 * Raises the current value to the power of an {@code int}.
	 * @param exponent power to raise by	 
	 * @return number after exponentiation
	 */
	[ImportNative]
	public power(int value) => (float);
	
	/** 
	 * Raises the current value to the power of another {@code float}.
	 * @param exponent power to raise by	 
	 * @return number after exponentiation
	 */
	[ImportNative]
	public power(float value) => (float);
	
	/** 
	 * Finds the sine of the current value.	 	 
	 * @return sine of the value
	 */
	[ImportNative]
	public sin() => (float);
	
	/** 
	 * Finds the cosine of the current value.	 	 
	 * @return cosine of the value
	 */
	[ImportNative]
	public cos() => (float);
	
	
	/** 
	 * Finds the tangent of the current value.	 	 
	 * @return tangent of the value
	 */
	[ImportNative]
	public tan() => (float);
	
	/** 
	 * Finds the natural logarithm of the current value.	 	 
	 * @return natural logarithm of the value
	 */
	[ImportNative]
	public logBaseE() => (float);
	
	/** 
	 * Finds the logarithm base 2 of the current value.	 	 
	 * @return logarithm base 2 of the value
	 */
	[ImportNative]
	public logBase2() => (float);
	
	/** 
	 * Finds the logarithm base 10 of the current value.	 	 
	 * @return logarithm base 10 of the value
	 */
	[ImportNative]
	public logBase10() => (float);
	
	/** 
	 * Multiplies the current value by another {@code float} and adds a third
	 * {@code float} in a high-precision register if supported and returns
	 * the resulting value.	
	 * @param multiplicand value to multiply by
	 * @param addend value to add 	 
	 * @return result
	 */
	[ImportNative]
	public multiplyAdd(float multiplicand, float addend) => (float);
	
	/** 
	 * Finds the largest {@code float} value with no fractional part that is
	 * less than or equal to the current value.	 	
	 * @return floor of the current value
	 */
	[ImportNative]
	public floor() => (float);
	
	/** 
	 * Finds the smallest {@code float} value with no fractional part that is
	 * greater than or equal to the current value.	 	
	 * @return ceiling of the current value
	 */
	[ImportNative]
	public ceiling() => (float);
	
	/** 
	 * Rounds the current {@code float} value to the nearest integer.	 	 	
	 * @return current value rounded to the nearest integer
	 */
	public round() => (float)
	{
		if( this < 0.0f )
			return (this - 0.5f).ceiling();
		else
			return (this + 0.5f).floor();	
	}	

	// Method for CanHash
	/** 
	 * Finds a hash value for the current value.	 
	 * @return hash value	 
	 */
	public get hash() => (ulong)
	{
		return this->bits->hash;
	}

	/** 
	 * Checks to see if the current value represents an IEEE 754 not-a-number
	 * value. 	 
	 * @return {@code true} if the current value is not a number	 
	 */
	public isNaN() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) == EXPONENT_MASK and
				(this->raw & SIGNIFICAND_MASK) != 0u;
	}
	
	/** 
	 * Checks to see if the current value represents an IEEE 754 value for
	 * positive or negative infinity.
	 * @return {@code true} if the current value is infinite	 
	 */
	public isInfinite() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) == EXPONENT_MASK and
				(this->raw & SIGNIFICAND_MASK) == 0u;
	}
	
	/** 
	 * Checks to see if the current value represents an IEEE 754 value for
	 * a finite number.
	 * @return {@code true} if the current value is finite	 
	 */
	public isFinite() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) != EXPONENT_MASK;
	}
	
	/** 
	 * Finds the minimum of the current value and another {@code float}.
	 * @param other value
	 * @return minimum value	 
	 */
	public min(float other) => (float)
	{
		return this < other ? this, other;
	}
	
	/** 
	 * Finds the maximum of the current value and another {@code float}.
	 * @param other value
	 * @return maximum value	 
	 */
	public max(float other) => (float)
	{
		return this > other ? this, other;
	}
	
	
	/** 
	 * Finds the minimum of the current value and a {@code double}.
	 * @param other value
	 * @return minimum value	 
	 */
	public min(double other) => (double)
	{
		return this < other ? this, other;
	}
	
	/** 
	 * Finds the maximum of the current value and a {@code double}.
	 * @param other value
	 * @return maximum value	 
	 */
	public max(double other) => (double)
	{
		return this > other ? this, other;
	}
	
	// Method for CanNegate<float>
	/** 
	 * Negates the value.
	 * @return negated value	 
	 */
	[ImportNative]
	public negate() => (float);
	
	/** 
	 * Retrieves the raw representation of 32 bits that makes up the current
	 * {@code float} value, as a {@code uint}.
	 * @return  bit representation of {@code float} value
	 */ 
	[ImportNative]
	public get raw() => (uint);
	
	/** 
	 * Retrieves the representation of 32 bits that makes up the current
	 * {@code float} value, as a {@code uint}, except that all NaN values
	 * are treated as the same value.
	 * @return  bit representation of {@code float} value
	 */
	public get bits() => (uint)
	{
		if( isNaN() )
			return NaN->raw;
		return this->raw;	
	}

    /**
     * Returns a non-negative version of the current value.
     * @return non-negative value
     */
    public abs() => (float)
    {
        return this < 0.0f ? -this, this;
    }
	
	/** 
	 * Returns a {@code String} representation of the value, in base 10, with
	 * a maximum precision of 9 decimal digits, a threshold of 7 integer
	 * digits before scientific notation is used, and a threshold of 3
	 * fractional digits without integer digits before scientific notation is
	 * used.
	 * @return  {@code String} representation
	 */ 
	public  toString() => (String)
	{
		return toDouble().toString(9, 7, 3);
	}	
	
	/** 
	 * Returns a {@code String} representation of the value, in base 10, with
	 * the specificed maximum precision of decimal digits, the specified
	 * threshold of integer digits before scientific notation is used, and the
	 * specified threshold of fractional digits without integer digits before
	 * scientific notation is used.
	 * @return  {@code String} representation
	 */ 
	public toString(int maxPrecision, int integerThreshold, int fractionalThreshold ) => (String)
	{
		return toDouble().toString(maxPrecision, integerThreshold, fractionalThreshold);
	}
	
	// C FRAMEWORK EXTENSIONS
	[ExportAssembly]
	private _shadow_standard__Float_getClass() => (Class)
	{
		return float:class;
	}
}
