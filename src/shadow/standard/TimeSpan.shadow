/**
 * Class {@code TimeSpan} represents a time interval.
 *
 * @author Claude Abounegm
 */
locked immutable class shadow:standard@
	TimeSpan
is CanAdd<TimeSpan>
and CanSubtract<TimeSpan>
and CanCompare<TimeSpan>
{
	immutable long NANOS_PER_MICROSECOND = 1000;
	immutable double MICROSECONDS_PER_NANO = 1.0 / NANOS_PER_MICROSECOND;

	immutable long NANOS_PER_MILLISECOND = NANOS_PER_MICROSECOND * 1000;
	immutable double MILLISECONDS_PER_NANO = 1.0 / NANOS_PER_MILLISECOND;

	immutable long NANOS_PER_SECOND = NANOS_PER_MILLISECOND * 1000;
	immutable double SECONDS_PER_NANO = 1.0 / NANOS_PER_SECOND;

	immutable long NANOS_PER_MINUTE = NANOS_PER_SECOND * 60;
	immutable double MINUTES_PER_NANO = 1.0 / NANOS_PER_MINUTE;

	immutable long NANOS_PER_HOUR = NANOS_PER_MINUTE * 60;
	immutable double HOURS_PER_NANO = 1.0 / NANOS_PER_HOUR;

	immutable long NANOS_PER_DAY = NANOS_PER_MINUTE * 24;
	immutable double DAYS_PER_NANO = 1.0 / NANOS_PER_DAY;

	long totalNanos = 0;

	public create(long nanoSeconds)
	{
		totalNanos = nanoSeconds;
	}
	
	public create(int hours, int minutes, int seconds)
	{
		this(0, hours, minutes, seconds, 0);
	}
	
	public create(int seconds, int millis, int micros, long nanos)
	{
		this(0, 0, 0, seconds, millis, micros, nanos);
	}
	
	public create(int days, int hours, int minutes, int seconds, int millis)
	{
		this(days, hours, minutes, seconds, millis, 0);
	}

	public create(int days, int hours, int minutes, int seconds, int millis, int micros)
	{
		this(days, hours, minutes, seconds, millis, 0, 0);
	}
	
	public create(int days, int hours, int minutes, int seconds, int millis, int micros, long nanos)
	{
		totalNanos = nanos;
		totalNanos += micros * NANOS_PER_MICROSECOND;
		totalNanos += millis * NANOS_PER_MILLISECOND;
		totalNanos += seconds * NANOS_PER_SECOND;
		totalNanos += minutes * NANOS_PER_MINUTE;
		totalNanos += hours * NANOS_PER_HOUR;
		totalNanos += days * NANOS_PER_DAY;
	}

	public get days() => (int)
	{
		return cast<int>((totalNanos / NANOS_PER_DAY) % 24);		
	}

	public get hours() => (int)
	{
		return cast<int>((totalNanos / NANOS_PER_HOUR) % 24);		
	}

	public get minutes() => (int)
	{
		return cast<int>((totalNanos / NANOS_PER_MINUTE) % 60);
	}
	
	public get seconds() => (int)
	{
		return cast<int>((totalNanos / NANOS_PER_SECOND) % 60);
	}
	
	public get milliSeconds() => (int)
	{
		return cast<int>((totalNanos / NANOS_PER_MILLISECOND) % 1000);
	}
	
	public get microSeconds() => (int)
	{
		return cast<int>((totalNanos / NANOS_PER_MICROSECOND) % 1000000);
	}
	
	public get nanoSeconds() => (int)
	{
		return cast<int>(totalNanos % 1000000000);
	}
	
	public get totalDays() => (double)
	{
		return cast<double>(totalNanos) * DAYS_PER_NANO;
	}
	
	public get totalHours() => (double)
	{
		return cast<double>(totalNanos) * HOURS_PER_NANO;
	}
	
	public get totalMinutes() => (double)
	{
		return cast<double>(totalNanos) * MINUTES_PER_NANO;
	}

	public get totalSeconds() => (double)
	{
		return cast<double>(totalNanos) * SECONDS_PER_NANO;
	}

	public get totalMilliSeconds() => (double)
	{
		return cast<double>(totalNanos) * MILLISECONDS_PER_NANO;
	}

	public get totalMicroSeconds() => (double)
	{
		return cast<double>(totalNanos) * MICROSECONDS_PER_NANO;
	}
		
	public get totalNanoSeconds() => (long)
	{
		return totalNanos;
	}
	
	public get isPositive() => (boolean)
	{
		return (totalNanos > 0);
	}

	public readonly addDays(int days) => (TimeSpan)
	{
		var nanos = this->totalNanoSeconds + days * NANOS_PER_DAY;
		return TimeSpan:create(nanos);	
	}
	
	public readonly addMinutes(int minutes) => (TimeSpan)
	{
		var nanos = this->totalNanoSeconds + minutes * NANOS_PER_MINUTE;
		return TimeSpan:create(nanos);
	}
	
	public readonly addSeconds(int seconds) => (TimeSpan)
	{
		var nanos = this->totalNanoSeconds + seconds * NANOS_PER_SECOND;
		return TimeSpan:create(nanos);
	}
	
	public readonly addMilliSeconds(int milliSeconds) => (TimeSpan)
	{
		var nanos = this->totalNanoSeconds + milliSeconds * NANOS_PER_MILLISECOND;
		return TimeSpan:create(nanos);
	}
	
	public readonly addMicroSeconds(int microSeconds) => (TimeSpan)
	{
		var nanos = this->totalNanoSeconds + microSeconds * NANOS_PER_MICROSECOND;
		return TimeSpan:create(nanos);
	}

	public readonly add(TimeSpan other) => (TimeSpan)
	{
		var nanos = this->totalNanoSeconds + other->totalNanoSeconds;
		return TimeSpan:create(nanos);
	}
	
	public readonly subtract(TimeSpan other) => (TimeSpan)
	{
		var nanos = this->totalNanoSeconds - other->totalNanoSeconds;
		return TimeSpan:create(nanos);
	}

	public readonly equal(TimeSpan other) => (boolean)
	{
		return (totalNanos == other:totalNanos);
	}
	
	public readonly compare(TimeSpan other) => (int)
	{
		if(totalNanos < other:totalNanos) {
			return -1;
		}
		
		if(totalNanos > other:totalNanos) {
			return 1;
		}
		
		return 0;
	}
}