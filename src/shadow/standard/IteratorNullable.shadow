/**
 * Interface {@code IteratorNullable<T>} allows each item in a collection to
 * be visited. It is expected that container classes that can contain
 * {@code null} value will have an inner class with this interface. This
 * interface differs from {@code Iterator<T>} in that the values it retrieves
 * may sometimes be {@code null}.
 *
 * @seeDoc shadow:standard@CanIterateNullable 
 * @seeDoc shadow:standard@Iterator
 */
interface shadow:standard@IteratorNullable<T>
{
	/**
	 * Method to check if there is another value that the iterator has not
	 * yet visited in the collection.	 
	 * @return {@code true} if there is another value to visit  	 
	 */
	readonly hasNext() => (boolean);
	
	/**
	 * Method to move the iterator forward and retrieve the next value in the
	 * collection, which might be {@code null}.  Implementations are expected
	 * to throw a {@code NoSuchElementException} if there are no more values.
	 * @return next value
	 *
	 * @seeDoc shadow:utility@NoSuchElementException
	 */
	next() => (nullable T);
}