/**
 * {@code Class} objects are used to hold the type information in all Shadow
 * objects.  Methods on {@code Class}  objects are used for internal
 * functionality such as checking type-casts and performing allocations.
 */
immutable class shadow:standard@
	Class
is  CanHash
{
	get MethodTable[] interfaceTables;
	get Class[] interfaces;	
	get String name;
	get nullable Class parent; //parent is base class in array class
	get int flags;
	get int size;				//size is number of dimensions in array class
	
	/// Flag used specify that a type is an interface type, 1.
	public constant int INTERFACE 	= 0b1;
	/// Flag used to specify that a type is a primitive type, 2.
	public constant int PRIMITIVE 	= 0b10;  
	/// Flag used to specify that a type is a generic type, 4
	public constant int GENERIC		= 0b100;
	/// Flag used to specify that a type is an array type, 8
	public constant int ARRAY 		= 0b1000;
	/// Flag used to specify that a type is a singleton type, 16.
	public constant int SINGLETON 	= 0b10000;
	/// Flag used to specify that a type is a method type, 32.
	public constant int METHOD		= 0b100000;
	
	/**
	 * Checks whether or not the class is an interface type.
	 * @return {@code true} if the class is an interface type	  
	 */
	public locked readonly isInterface() => ( boolean )
	{		
		return (flags & INTERFACE) != 0;
	}
	
	/**
	 * Checks whether or not the class is a primitive type.
	 * @return {@code true} if the class is a primitive type	  
	 */
	public locked readonly isPrimitive() => ( boolean )
	{		
		return (flags & PRIMITIVE) != 0;
	}
	
	/**
	 * Checks whether or not the class is a generic type.
	 * @return {@code true} if the class is a generic type	  
	 */
	public locked readonly isGeneric() => ( boolean )
	{
		return (flags & GENERIC) != 0;
	}
	
	/**
	 * Checks whether or not the class is an array type.
	 * @return {@code true} if the class is an array type	  
	 */
	public locked readonly isArray() => ( boolean )
	{		
		return (flags & ARRAY) != 0;
	}
	
	/**
	 * Checks whether or not the class is a singleton type.
	 * @return {@code true} if the class is a singleton type	  
	 */
	public locked readonly isSingleton() => ( boolean )
	{
		return (flags & SINGLETON) != 0;
	}
	
	/**
	 * Checks whether or not the class is a method type.
	 * @return {@code true} if the class is a method type	  
	 */
	public locked readonly isMethod() => ( boolean )
	{		
		return (flags & METHOD) != 0;
	}

	/**
	 * Creates a new {@code Class} object with the given name, flags, size,
	 * parent, interfaces, and interface method tables.  This method should
	 * only be called by {@code GenericClass}.
	 * @param name name of the class
	 * @param flags flags specifying the kind of type
	 * @param size size required for an object whose type is given by this class
	 * @param parent parent class
	 * @param interfaces interface classes supported by this class
	 * @param data method tables associated with each interface
	 */
	protected create(String name, int flags, int size, immutable nullable Class parent, immutable Class[] interfaces, immutable MethodTable[] interfaceTables) 
	{	
		this:parent = parent;
		this:flags = flags;
		this:size = size;
		this:interfaces = interfaces;
		this:interfaceTables = interfaceTables;		
		this:name = name;
	}
	
	/**
	 * Retrieves method table associated with the given interface.	 
	 * @param interfaceClass interface to look up inside this class
	 * @return method table associated with the interface
	 * @throws CastException if interface cannot be found	 	  
	 */
	protected locked readonly interfaceData( Class interfaceClass ) => ( immutable MethodTable )
	{		
		for ( int i = 0; i < interfaces->size; i += 1 )			
			if ( interfaces[i] === interfaceClass )
				return interfaceTables[i];
		
		throw CastException:create("Class " # this # " does not implement interface " # interfaceClass);
	}
	
	/**
	 * Compares the current class to another {@code Class}, returning {@code true}
	 * if they are the same.	 
	 * @param other object to compare to
	 * @return {@code true} if identical
	 */
	public readonly equal( Class other ) => ( boolean )
	{
		if( this === other )
			return true;
			
		if( flags != other:flags )
			return false;
		
		try
		{	
			if( isArray() )
			{
				return other.isArray() and check(parent).equal(check(other:parent));			
			}
			else if( isMethod() )
			{
				if( !other.isMethod() or size != other:size or interfaceTables->size != other:interfaceTables->size )
					return false;
				
				//this approach probably doesn't make sense
				//MethodClass may need to be its own subtype
				/*
				for( int i = 0; i < data->size; i += 1 )
				{
					Class parameter = cast<Class>(data[i]);
					Class otherParameter = cast<Class>(other:data[i]);
					
					if( !parameter.equal(otherParameter) )
						return false;				
				}
				*/
				
				return true;
			}
		}
		recover
		{}
		
		return false;	
	}

	/**
	 * Checks to see if the current {@code Class} object is the subtype of
	 * another {@code Class} object, returning {@code true} if it is.	 	 
	 * @param other object to compare to
	 * @return {@code true} if the current class is its subtype
	 */
	public locked readonly isSubtype( Class other ) => ( boolean )
	{		
		if ( this === other )
			return true;
			
		try
		{	
			if( isArray() )
			{
				return equal( other );
			}	
			else if( isMethod() )
			{
				if( !other.isMethod() or size != other:size or interfaceTables->size != other:interfaceTables->size )
					return false;
			/*
				for( int i = 0; i < size; i += 1 )
				{
					Class parameter = cast<Class>(data[i]);
					Class otherParameter = cast<Class>(other:data[i]);
					
					if( !otherParameter.isSubtype(parameter) )
						return false;				
				}
				
				for( int i = size; i < data->size; i += 1 )
				{
					Class return_ = cast<Class>(data[i]);
					Class otherReturn = cast<Class>(other:data[i]);
					
					if( !return_.isSubtype(otherReturn) )
						return false;				
				}
				*/
				
				return true;					
			}
			else //regular classes and interfaces
			{
				if( other.isInterface() )
				{
					for ( int i = 0; i < interfaces->size; i += 1 )
						if ( interfaces[i] === other  )
							return true;								
				}
				else if( !isInterface() )
				{
					return check(parent).isSubtype(other);
				}
			}
		}
		recover
		{}
		
		return false;
	}

	/**
	 * Returns the name of the current class.	 
	 * @return name of the class
	 */
	public readonly toString() => ( String )
	{
		return name;
	}
	
	/**
	 * Returns the size of a pointer in bytes in the current run-time
	 * system. The expected values are 4 for 32-bit systems or 8 for
	 * 64-bit systems.	 
	 * @return size of a pointer
	 */
	[ImportNative]
	public locked readonly pointerSize() => ( int );
	
	
	/**
	 * For normal types, returns the size required for an object whose type
	 * is given by this class.  For array and interface types, it gives the 
	 * width of the type. For primitive types, it gives the size of the wrapper
	 * object, not the raw primitive type.
	 * @return size of an object
	 */
	public locked get readonly size() => ( int )
	{
		return size;				
	}
	
	/**
	 * Returns the width needed to store an object whose type is given by this
	 * class in an array.  For normal objects and arrays, this width is the pointer size.
	 * For primitive types, it is the size of the raw primitive type. For
	 * interface type, the size is twice the pointer size, accounting for
	 * the interface class and the method table. 
	 * @return width of an object
	 */
	public locked get readonly width() => ( int )
	{	
		if( isMethod() )		
			return 3 * pointerSize() + 4 * size;
		else if( isInterface() )
			return 2 * pointerSize();		
		else if( isPrimitive() )
		{
			if( this === boolean:class or 
				this === byte:class or
				this === ubyte:class )
				return 1;
			else if( this === short:class or
				this === ushort:class )
				return 2;
			else if( this === code:class or
				this === float:class or
				this === int:class or
				this === uint:class )
				return 4;
			else
				return 8; 
		}
		else
			return pointerSize();		
	}
	
	/** 
	 * Finds a hash value for the current class, based on its name.	 
	 * @return hash value	 
	 */	
	public locked get readonly hash() => ( ulong )
	{
		return toString().hash();
	}
}
