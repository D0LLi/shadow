/**
 * Class {@code double} contains the methods that can be called on
 * {@code double} values.
 */
locked immutable class shadow:standard@
	Double
is	FloatingPoint<double>
and	CanHash
{
	/**
	 * Closest {@code double} to the mathematical constant pi, the ratio of a
	 * circle's circumference to its diameter, approximately 3.141592653589793.
	 */ 
	public constant double PI = 3.141592653589793;
	
	/**
	 * Closest {@code double} to the mathematical constant e, the base of the 
	 * natural logarithm, approximately 2.718281828459045.
	 */
	public constant double E = 2.718281828459045;

	/**
	 * Constant representing one of the 64-bit not-a-number values supported
	 * by the IEEE 754 standard.
	 */
	public constant double NaN = 0d / 0d;
	
	/**
	 * Constant representing positive infinity with 64 bits in the IEEE 754
	 * standard.
	 */
	public constant double INFINITY = 1d / 0d;
	
	/**
	 * Constant representing negative infinity with 64 bits in the IEEE 754
	 * standard.
	 */
	public constant double NEGATIVE_INFINITY = -1d / 0d;

	/* Constants used to manipulate the raw bit form of the double value. */
	
	private constant ulong SIGN_MASK = 0x8000000000000000uL;
	private constant ulong EXPONENT_MASK = 0x7ff0000000000000uL;
	private constant ulong SIGNIFICAND_MASK = 0xfffffffffffffuL;

	// Methods for Number
	
	/** 
	 * Converts the {@code double} value to a {@code byte}, which will overflow
	 * if the value is too large to be contained in a {@code byte}. 	 
	 * @return {@code byte} value 
	 */
	[ImportNative]
	public toByte() => (byte);
	
	/** 
	 * Converts the {@code double} value to a {@code ubyte}, which will overflow
	 * if the value is too large to be contained in a {@code ubyte} and
	 * underflow if the value is negative. 	 
	 * @return {@code ubyte} value 
	 */
	[ImportNative]
	public toUByte() => (ubyte);
	
	/** 
	 * Converts the {@code double} value to a {@code short}, which will overflow
	 * if the value is too large to be contained in a {@code short}. 	 
	 * @return {@code short} value 
	 */
	[ImportNative]
	public toShort() => (short);
	
	/** 
	 * Converts the {@code double} value to a {@code ushort}, which will overflow
	 * if the value is too large to be contained in a {@code ushort} and
	 * underflow if the value is negative. 	 
	 * @return {@code ushort} value 
	 */
	[ImportNative]
	public toUShort() => (ushort);
	
	/** 
	 * Converts the {@code double} value to an {@code int}, which will overflow
	 * if the value is too large to be contained in an {@code int}. 	 
	 * @return {@code int} value 
	 */
	[ImportNative]
	public toInt() => (int);
	
	/** 
	 * Converts the {@code double} value to a {@code uint}, which will overflow
	 * if the value is too large to be contained in a {@code uint} and
	 * underflow if the value is negative.	 
	 * @return {@code uint} value 
	 */
	[ImportNative]
	public toUInt() => (uint);
	
	/** 
	 * Converts the {@code double} value to a {@code long}, which will overflow
	 * if the value is too large to be contained in a {@code long}. 	 
	 * @return {@code long} value 
	 */
	[ImportNative]
	public toLong() => (long);
	
	/** 
	 * Converts the {@code double} value to a {@code ulong}, which will overflow
	 * if the value is too large to be contained in a {@code ulong} and
	 * underflow if the value is negative.	 
	 * @return {@code ulong} value 
	 */
	[ImportNative]
	public toULong() => (ulong);
	
	/** 
	 * Converts the {@code double} value to a {@code code}, which will overflow
	 * if the value is too large to be contained in a {@code code}. 	 
	 * @return {@code code} value 
	 */
	[ImportNative]
	public toCode() => (code);
	
	/** 
	 * Converts the {@code double} value to a {@code float}, which may lose
	 * precision. 	 
	 * @return {@code float} value 
	 */
	[ImportNative]
	public toFloat() => (float);
	
	/** 
	 * Converts the {@code double} value to a {@code double}, which involves
	 * no change. 	 
	 * @return {@code double} value 
	 */
	[ImportNative]
	public toDouble() => (double);

	// Method for CanAdd<double>
	/**
	 * Adds another {@code double} to the current value and returns the resulting value.	 
	 * @param other value to add
	 * @return sum of the two values
	 */
	[ImportNative]
	public add(double other) => (double);
	
	// Method for CanSubtract<double>
	/**
	 * Subtracts another {@code double} from the current value and returns the resulting value.	 
	 * @param other value to subtract
	 * @return difference of the two values
	 */
	[ImportNative]
	public subtract(double other) => (double);
	
	// Method for CanMultiply<double>
	/**
	 * Multiplies the current value by another {@code double} and returns the resulting value.	 
	 * @param other value to multiply by
	 * @return product of the two values
	 */
	[ImportNative]
	public multiply(double other) => (double);
	
	// Method for CanDivide<double>
	/**
	 * Divides the current value by another {@code double} and returns the quotient.	 
	 * @param other value to divide by
	 * @return quotient of the division
	 */
	[ImportNative]
	public divide(double other) => (double);
	
	// Method for CanModulus<double>
	/**
	 * Divides the current value by another {@code double} and returns the remainder.	 
	 * @param other value to divide by
	 * @return remainder of the division
	 */
	[ImportNative]
	public modulus(double other) => (double);
	
	// Method for CanCompare<double>
	/**
	 * Compares the current value to another {@code double}, returning {@code -1},
	 * {@code 0}, or {@code 1}, if the current value is smaller than, equal to, or larger
	 * than the other value, respectively.
	 * @param other value to compare to
	 * @return whether smaller, equal, or larger
	 */	
	[ImportNative]
	public compare(double other) => (int);
	
	// Method for CanEqual<double>
	/**
	 * Compares the current value to another {@code double}, returning {@code true}
	 * if they represent the same number.
	 * @param other value to compare to
	 * @return {@code true} if identical
	 */
	[ImportNative]
	public equal(double other) => (boolean);
	
	// Other math operations
	
	/** 
	 * Finds the square root of the value.
	 * @return square root	 
	 */
	[ImportNative]
	public squareRoot() => (double);
	
	/** 
	 * Raises the current value to the power of an {@code int}.
	 * @param exponent power to raise by	 
	 * @return number after exponentiation
	 */
	[ImportNative]
	public power(int value) => (double);
	
	/** 
	 * Raises the current value to the power of a {@code double}.
	 * @param exponent power to raise by	 
	 * @return number after exponentiation
	 */
	[ImportNative]
	public power(double value) => (double);
	
	/** 
	 * Finds the sine of the current value.	 	 
	 * @return sine of the value
	 */
	[ImportNative]
	public sin() => (double);
	
	/** 
	 * Finds the cosine of the current value.	 	 
	 * @return cosine of the value
	 */
	[ImportNative]
	public cos() => (double);
	
	/** 
	 * Finds the tangent of the current value.	 	 
	 * @return tangent of the value
	 */
	[ImportNative]
	public tan() => (double);
	
	/** 
	 * Finds the natural logarithm of the current value.	 	 
	 * @return natural logarithm of the value
	 */
	[ImportNative]
	public logBaseE() => (double);
	
	/** 
	 * Finds the logarithm base 2 of the current value.	 	 
	 * @return logarithm base 2 of the value
	 */
	[ImportNative]
	public logBase2() => (double);
	
	/** 
	 * Finds the logarithm base 10 of the current value.	 	 
	 * @return logarithm base 10 of the value
	 */
	[ImportNative]
	public logBase10() => (double);
	
	/** 
	 * Finds the largest {@code double} value with no fractional part that is
	 * less than or equal to the current value.	 	
	 * @return floor of the current value
	 */
	[ImportNative]
	public floor() => (double);
	
	/** 
	 * Finds the smallest {@code double} value with no fractional part that is
	 * greater than or equal to the current value.	 	
	 * @return ceiling of the current value
	 */
	[ImportNative]
	public ceiling() => (double);
	
	/** 
	 * Rounds the current {@code double} value to the nearest integer.	 	 	
	 * @return current value rounded to the nearest integer
	 */
	public round() => (double)
	{
		if( this < 0.0 )
			return (this - 0.5).ceiling();
		else
			return (this + 0.5).floor();	
	}

	// Method for CanHash
	/** 
	 * Finds a hash value for the current value.	 
	 * @return hash value	 
	 */
	public get hash() => (ulong)
	{
		return this->bits->hash;
	}
	
	/** 
	 * Checks to see if the current value represents an IEEE 754 not-a-number
	 * value. 	 
	 * @return {@code true} if the current value is not a number	 
	 */
	public isNaN() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) == EXPONENT_MASK and
				(this->raw & SIGNIFICAND_MASK) != 0uL;
	}
	
	/** 
	 * Checks to see if the current value represents an IEEE 754 value for
	 * positive or negative infinity.
	 * @return {@code true} if the current value is infinite	 
	 */
	public isInfinite() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) == EXPONENT_MASK and
				(this->raw & SIGNIFICAND_MASK) == 0uL;
	}
	
	/** 
	 * Checks to see if the current value represents an IEEE 754 value for
	 * a finite number.
	 * @return {@code true} if the current value is finite	 
	 */
	public isFinite() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) != EXPONENT_MASK;
	}
	
	/** 
	 * Finds the minimum of the current value and another {@code double}.
	 * @param other value
	 * @return minimum value	 
	 */
	public min(double other) => (double)
	{
		return this < other ? this, other;
	}

	/**
     * Returns a non-negative version of the current value.
     * @return non-negative value
     */
    public abs() => (double)
    {
        return this < 0.0 ? -this, this;
    }
	
	/** 
	 * Finds the maximum of the current value and another {@code double}.
	 * @param other value
	 * @return maximum value	 
	 */
	public max(double other) => (double)
	{
		return this > other ? this, other;
	}
	
	/** 
	 * Returns a {@code String} representation of the value, in base 10, with
	 * a maximum precision of 17 decimal digits, a threshold of 7 integer
	 * digits before scientific notation is used, and a threshold of 3
	 * fractional digits without integer digits before scientific notation is
	 * used.
	 * @return  {@code String} representation
	 */ 
	public  toString() => (String)
	{
		return toString(16, 7, 3);
	}
	
	/*	
	Fix this with something not as hacky 
	Consider: Printing Floating-Point Numbers Quickly and Accurately with Integers by Florian Loitsch
	*/
	/** 
	 * Returns a {@code String} representation of the value, in base 10, with
	 * the specificed maximum precision of decimal digits, the specified
	 * threshold of integer digits before scientific notation is used, and the
	 * specified threshold of fractional digits without integer digits before
	 * scientific notation is used.
	 * @return  {@code String} representation
	 */ 	
	public  toString(int maxPrecision, int integerThreshold, int fractionalThreshold ) => (String)
	{
		if( isNaN() )
			return "NaN";
			
		if( this === INFINITY )
			return "Infinity";
		
		if( this === NEGATIVE_INFINITY )
			return "-Infinity";
	
		boolean negative = false;
		
		ulong bits = this->bits;
		if( (bits & SIGN_MASK) != 0uL )
			negative = true;
							
		int exponent = cast<int>((bits & EXPONENT_MASK) >> 52);
		ulong significand = bits & SIGNIFICAND_MASK;	
		
		if( exponent == 0 )
		{
			if( significand == 0uL )
				 return negative ? "-0.0", "0.0";
									
			exponent = -1022 - 52; 			
		}
		else
		{
			significand |= (SIGNIFICAND_MASK + 1uL);			
			exponent -= (1023 + 52);
		}
				
		// There are faster ways to do double output, but this is a hack for now.
		BigInteger result = BigInteger:create(significand);						
		int base10Shift = 0;
		
		if( exponent < 0 )
		{				
			base10Shift = cast<int>(-exponent * 0.3010299956639812) + 1;  // ceiling of log_10(2) times exponent
			//left shift
			BigInteger ten = BigInteger:create(10);
			BigInteger tenPower = ten.power(BigInteger:create(base10Shift));			
			result = result * tenPower;
			result = result.bitShiftLeft(exponent); // shifts right because exponent is negative
		}		 
		else
		{
			base10Shift = 0;
			result = result.bitShiftLeft(exponent);
		}	
		
		MutableString output = MutableString:create(#result);
	
		int rightZeroes = 0;
		for( int i = output->size - 1; i >= 0 and output[i] == '0'; i -= 1 )
			rightZeroes += 1;

		int integerDigits = output->size - base10Shift;
		int length = maxPrecision;						 
		length = length.min(output->size - rightZeroes);
		length = length.max(2);
		
		if( round( output, length ) )
			integerDigits += 1;			
		
		// Number is too big or too small, use scientific notation		
		if( integerDigits > integerThreshold or -integerDigits > fractionalThreshold )
		{	
		 	output.insert(1, cast<ubyte>('.'));
		 	if( output->size == 2 )
		 		output.append(cast<ubyte>('0'));
		 	removeZeroes( output );			 	
		 	output.append(cast<ubyte>('E'));
			output.append(#(integerDigits - 1));
		}		
		// Number is smaller than 1
		else if( integerDigits <= 0 )
		{
			// Pad with zeroes on the left.
			for( int i = 0; i < -integerDigits; i += 1 )			
				output.prepend(cast<ubyte>('0'));
							
			length = maxPrecision + 1;						 
			length = length.min(output->size - rightZeroes);
			length = length.max(-integerDigits + 1);
							
			round( output, length );	
			output.prepend(cast<ubyte>('.'));
			output.prepend(cast<ubyte>('0'));
			removeZeroes( output );	
		}
		//Number is larger than 1
		else
		{		
			// Pad with zeroes on the right, if necessary.
			for( int i = output->size; i <= integerDigits; i += 1 )			
				output.append(cast<ubyte>('0'));
		 	output.insert(integerDigits, cast<ubyte>('.'));
		 	removeZeroes( output );
		}		
			
		if( negative )	
			return #(output.prepend(cast<ubyte>('-')));
		else
			return #output;
	}
	
	// Shortens representation to given length, rounding values as needed.
	private round(MutableString number, int length) => (boolean)
	{
		if( length >= number->size )
			return false;
		else if( length > number->size )
		{
			while( length > number->size )
				number.append(cast<ubyte>('0'));
			return false;
		}
		else
		{
			if( length < 17 and number[length] >= '5' )
			{
				int index = length;
				number[index - 1] += 1uy;				
			
				while( index > 1 and number[index - 1] > '9' )
				{
					number[index - 1] = cast<ubyte>('0');
					index -= 1;
					number[index - 1] += 1uy;
				}
				
				if( number[0] > '9' )
				{				
					number[0] = cast<ubyte>('0');				
					number.prepend(cast<ubyte>('1'));
					number.delete(length, number->size);
					return true;	
				}
			}
			
			number.delete(length, number->size);
			return false;
		}	
	} 
	
	// Removes useless padding zeroes from representation of double.
	private removeZeroes( MutableString string ) => ()
	{
		int index = string->size - 1;
		while( index > 1 and string[index] == '0' and string[index - 1] != '.' )
			index -= 1;			

		if( index < string->size - 1 )
			string.delete( index + 1, string->size );
	}

	/** 
	 * Retrieves the raw representation of 64-bits that makes up the current
	 * {@code double} value, as a {@code ulong}.
	 * @return  bit representation of {@code double} value
	 */ 
	[ImportNative]
	public get raw() => (ulong);
	
	/** 
	 * Retrieves the representation of 64-bits that makes up the current
	 * {@code double} value, as a {@code ulong}, except that all NaN values
	 * are treated as the same value.
	 * @return  bit representation of {@code double} value
	 */
	public get bits() => (ulong)
	{
		if( isNaN() )
			return NaN->raw;
		return this->raw;
	}
	
	// Method for CanNegate<double>
	/** 
	 * Negates the value.
	 * @return negated value	 
	 */
	[ImportNative]
	public negate() => (double);
	
	// C FRAMEWORK EXTENSIONS
	[ExportAssembly]
	private _shadow_standard__Double_getClass() => (Class)
	{
		return double:class;
	}
}