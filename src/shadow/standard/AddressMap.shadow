import shadow:utility@Map;
import shadow:utility@IllegalModificationException;
import shadow:utility@NoSuchElementException;

/**
 * Class {@code AddressMap} maps old object addresses to new object addresses.
 * It is used when making a deep copy of an object so that an object that has
 * already been copied won't be copied a second time.
 *
 * {@code AddressMap} is essentially a reimplementation of
 * {@code HashMap<K,V>}, which cannot be used because generic types create
 * problems for the compiler if used for these fundamental tasks.
 * 
 * @seeDoc shadow:utility@HashMap
 */
locked class shadow:standard@
	AddressMap is Map<ulong, ulong>	
{
	private constant long DEFAULT_INITIAL_CAPACITY = 16L;	
	private constant long MAXIMUM_CAPACITY = 1L << 30;
	private constant float DEFAULT_LOAD_FACTOR = 0.75f;
	
	/** Gets current number of entries stored in the map. */
	get long sizeLong = 0L;
	nullable Node[] table;
	float loadFactor;
	long threshold;
	long modifications = 0;		
	
	/**
	 * Creates an empty {@code AddressMap} with a default capacity of 16
	 * and maximum load factor of 0.75.  
	 */	
	public create()
	{
		this(DEFAULT_INITIAL_CAPACITY);
	}
	
	/**
	 * Creates an empty {@code AddressMap} with the specified capacity and
	 * maximum load factor of 0.75. 
	 * @param initialCapacity initial capacity of the map
	 */
	public create(long initialCapacity)
	{	
		this(initialCapacity, DEFAULT_LOAD_FACTOR);
	}
	
	/**
	 * Creates an empty {@code AddressMap} with the specified capacity and
	 * maximum load factor. 
	 * @param initialCapacity initial capacity of the map
	 * @param loadFactor maximum load factor before the map is resized
	 */
	public create(long initialCapacity, float loadFactor)
	{		
		long capacity = 1L;
		while( capacity < initialCapacity ) //powers of 2
			capacity <<= 1;
		table = Node:null[capacity];
		this:loadFactor = loadFactor;
		threshold = cast<long>(capacity * loadFactor);
	}
	
	/*
	 * Retrieves the number of elements held in the map, as an {@code int}.	  
	 * @return size
	 */
	public get readonly size() => (int)
	{
		return cast<int>( sizeLong );
	}	
	
	/*
	 * Resizes the map so that it can hold the new capacity, which must be a
	 * power of 2. 
	 * @param newCapacity new capacity of the map
	 */
	private resize(long newCapacity) => ()
	{		
		if(table->sizeLong == MAXIMUM_CAPACITY)
		{
			threshold = long:MAX;
			return;
		}
		
		nullable Node[] newTable = Node:null[newCapacity];
		long index;
		long hash;		
		
		for( long i = 0; i < table->sizeLong; i += 1 )
		{
			try
			{
				Node node = check(table[i]);
				while( true )
				{
					(index, hash) = findIndex( node->key, newCapacity );
					newTable[index] = Node:create(hash, node->key, node->value, newTable[index]);
					node = check(node->next);
				}
			}
			recover  //jumps here when node->next is null
			{}
		}
		
		table = newTable;
		threshold = cast<long>(newCapacity * loadFactor);		
	}
	

	private class Node
	{
		immutable get long hash;
		get ulong key;
		get set ulong value;
		get set nullable Node next = null;
		
		public readonly get value() => (ulong)
		{
			return value;
		}
		
		public readonly get next() => (nullable Node)
		{
			return next;
		}

		public create( long hash, ulong key, ulong value )
		{
			this(hash, key, value, null);
		}
		
		public create( long hash, ulong key, ulong value, nullable Node after )
		{
			this:hash = hash;
			this:key = key;
			this:value = value;
			next = after;
		}
	}
	
	/**
     * Checks whether or not the address map is empty.
     * @return {@code true} if the address map is empty
     */
    public readonly isEmpty() => (boolean empty)
    {
        return sizeLong == 0L;
    }	

	/*
	 * Finds the hash value and index for a given key based on the provided
	 * length.
	 */
	private readonly findIndex( ulong key, long length ) => ( long index, long hash )
	{
		ulong temp = key->hash;
		temp ^= (temp >> 20) ^ (temp >> 12);
		long hash = cast<long>(temp ^ (temp >> 7) ^ (temp >> 4));
		return ( hash & (length - 1L), hash );	
	}
	
	/**
	 * Retrieves the address associated with the key.
	 * If the key is not present, {@code null} is returned.  
	 * @param key key to find
	 * @return address at key location or {@code null} if not found
	 */
	public readonly index( ulong key ) => ( nullable ulong value )
	{
		(long index, long hash) = findIndex( key, table->sizeLong );
		try
		{
			Node current = check(table[index]);
			while ( current->hash != hash and current->key != key )
				current = check(current->next);
			
			//found correct node
			return current->value; 
		}
		recover //hit null before finding existing value
		{			
		}
		
		return null;				
	}
	
	/**
	 * Stores value address in the key address entry.	   
	 * @param key key corresponding to old address
	 * @param value value corresponding to new address
	 */
	public index( ulong key, ulong value ) => ()
	{
		( long index, long hash ) = findIndex( key, table->sizeLong );
		try
		{
			Node current = check(table[index]);
			while ( current->hash != hash and current->key != key )
				current = check(current->next);
			
			//found correct node
			current->value = value; 
		}
		recover //hit null before finding existing value
		{
			table[index] = Node:create(hash, key, value, table[index]);
			modifications += 1L;
			sizeLong += 1L;
			
			if( sizeLong > threshold )
				resize(2 * table->sizeLong);
		}
	}

	/**
	 * Removes the value stored in the key value entry.	   
	 * @param key key corresponding to old address
	 * @return value being removed or {@code null} if not present
	 */
	public remove( ulong key ) => ( nullable ulong value )
	{	
		( long index, long hash ) = findIndex( key, table->sizeLong );
		try
		{
			nullable Node last = null;
			Node current = check(table[index]);
			while ( current->hash != hash and current->key != key )
				( last, current ) = ( current, check(current->next) );
			try
			{
				check(last)->next = current->next;
			}
			recover
			{
				table[index] = current->next;
			}
			modifications += 1L;
			return current->value;
		}
		recover
		{
			return null;
		}
	}
	
	/**
	 * Checks to see if the map contains a key.	   
	 * @param key key to find
	 * @return {@code true} if present
	 */
	public readonly containsKey( ulong key ) => ( boolean found )
	{		
		( long index, long hash ) = findIndex( key, table->sizeLong );
		try
		{
			Node current = check(table[index]);			
			while ( current->hash != hash and current->key != key )
				current = check(current->next);
			return true;
		}
		recover
		{
			return false;			
		}
	}
	
	/**
	 * Checks to see if the map contains a particular value.	   
	 * @param value value to find
	 * @return {@code true} if present
	 */
	public readonly containsValue( ulong value ) => ( boolean found )
	{		
		foreach( ulong element in this )
			if( element == value )
				return true;
				
		return false;
	}

	/**
	 * Creates an iterator to iterate over all the values in the map.	   
	 * @return iterator
	 */
	public readonly iterator() => ( Iterator<ulong> )
	{
		return AddressMapIterator:create(this);
	}
	
	/**
	 * Removes all entries from the map and resets the capacity to default.
	 * @return map after being cleared
	 */
	public clear() => ( AddressMap )
	{
		sizeLong = 0L;
		table = Node:null[DEFAULT_INITIAL_CAPACITY];
		threshold = cast<long>(table->sizeLong * loadFactor);
		modifications += 1L;
		return this;
	}
	
	
	private class AddressMapIterator is Iterator<ulong>
	{
		long index = 0;
		nullable Node current;
		immutable long expectedModifications;
		AddressMap addressMap;
		
		public create(AddressMap addressMap)
		{	
			this:addressMap = addressMap;
			current = next(null);
			expectedModifications = addressMap:modifications;			
		}
		public next( nullable Node position ) => ( nullable Node )
		{	
			try
			{
				position = check(position)->next;
			}
			recover{}
		
			while( position === null and index < addressMap:table->sizeLong )
			{			
				position = addressMap:table[index];				
				index += 1L;					
			}
			
			return position; //returns null if nothing left			
		}

		private readonly checkForModifications() => ()
		{
			if ( addressMap:modifications != expectedModifications )
				throw IllegalModificationException:create();
		}

		public readonly hasNext() => ( boolean )
		{
			checkForModifications();
			return current !== null;
		}

		public next() => ( ulong value )
		{		
			checkForModifications();
			try
			{				 
				( ulong value, current ) = ( check(current)->value, next(current) );
				return value;
			}
			recover
			{				
				throw NoSuchElementException:create();
			}
		}
	}
}
