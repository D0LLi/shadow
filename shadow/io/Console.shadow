/**
 * Singleton {@code Console} provides methods for reading text data from
 * {@code stdin} and writing text data to {@code stdout} and {@code stderr}.
 * Unlike other singletons, {@code Console} is automatically created at the
 * beginning of a Shadow console program, since its functionality is used for
 * reporting uncaught exceptions. Some {@code Console} behavior is platform
 * specific.
 */
singleton shadow:io@Console
{
	[ImportAssembly]
	private readonly __shadowIoConsole_initialize() => ();
	
	[ImportAssembly]
	private readonly __shadowIoConsole_print(String str) => ();
	[ImportAssembly]
	private readonly __shadowIoConsole_printLine() => ();
	
	[ImportAssembly]
	private readonly __shadowIoConsole_printError(String str) => ();
	[ImportAssembly]
	private readonly __shadowIoConsole_printErrorLine() => ();
	
	[ImportAssembly]
	private readonly __shadowIoConsole_readBuffer(ubyte[] buffer) => (int);
	
	ubyte[] buffer = ubyte:create[1024];
	int start = 0;
	int end = 0;
	
	/**
	 * Creates a new {@code Console}.
	 */
	public create()
	{
		__shadowIoConsole_initialize();
	}

	/**
	 * Reads the next line of text from {@code stdin}, stopping when a new line
	 * or line feed character is reached.
	 * @return line as a {@code String}
	 * @return {@code true} if the end of the file was reached 
	 */
	public readLine() => ( String, boolean eof )
	{
		var string = MutableString:create();
		( code c, boolean eof ) = readCode();
		while ( c != '\n' and c != '\r' and !eof )
		{
			string.append(c);
			( c, eof ) = readCode();
		}
		
		if(!eof and c == '\r') // Try to consume CR after LF
		{
			(ubyte b, eof) = readByte();
			if(!eof and b != '\n') // If it wasn't a CR, back up
				start -= 1;		
		}
		return ( #string, eof );
	}
	
	/**
	 * Reads the next white-spaced delimited text from {@code stdin}, stopping
	 * when a space, a tab, a new line, or a line feed character is reached.	 
	 * @return text as a {@code String}
	 * @return {@code true} if the end of the file was reached 
	 */
	public readString() => ( String, boolean eof )
	{
		var string = MutableString:create();
		( code c, boolean eof ) = readCode();
		while( !eof and (c == '\n' or c == '\r' or c == ' ' or c == '\t'))
			( c, eof ) = readCode();
		while( !eof and c != '\n' and c != '\r' and c != ' ' and c != '\t')
		{
			string.append(c);
			( c, eof ) = readCode();
		}

		if(!eof) // Back up to the whitespace
			start -= 1;
		return ( #string, eof );
	}
	
	/**
	 * Reads the next white-spaced delimited text from {@code stdin} and 
	 * converts that value to an {@code int}.	 
	 * @return text converted to {@code int}
	 * @throws NumberFormatException if the text does not represent a legal
	 * {@code int}
	 */
	public readInt() => ( int )
	{
		(String text, ) = readString();
		return text.toInt();
	}
	
	/**
	 * Reads the next white-spaced delimited text from {@code stdin} and 
	 * converts that value to a {@code double}.	 
	 * @return text converted to {@code double}
	 * @throws NumberFormatException if the text does not represent a legal
	 * {@code double}
	 */
	public readDouble() => ( double )
	{
		(String text, ) = readString();
		return text.toDouble();
	}	
	
	
	/**
	 * Reads the next UTF-8 code point from {@code stdin}.	 	 
	 * @return character as a {@code code}
	 * @return {@code true} if the end of the file was reached 
	 */
	public readCode() => ( code, boolean eof )
	{
		uint value;
		boolean eof;
		( value, eof ) = readByte();
		if ( value < 0 )
		{
			int bytes = 0;
			ubyte mask = 1uy << 7 >> 1;
			while ( value >= mask )
			{
				bytes += 1;
				mask >>= 1;
			}
			value &= ~mask;
			while ( bytes > 0 )
			{
				value <<= 6;
				ubyte b;
				( b, eof ) = readByte();
				value |= b & 0b00111111uy;
				bytes -= 1;
			}
		}
		return ( cast<code>(value), eof );
	}
	
	/**
	 * Reads the next byte from {@code stdin}.	 	 
	 * @return next byte
	 * @return {@code true} if the end of the file was reached 
	 */
	public readByte() => (ubyte, boolean eof)
	{
		if(start < end)
		{
			ubyte value = buffer[start];
			start += 1;
			return (value, false);
		}
		else
		{			
			end = __shadowIoConsole_readBuffer(buffer);
			if(end == 0)
				return (0uy, true);
			
			ubyte value = buffer[0];
			start = 1;
			return (value, false);		
		}			
	}

	/**
	 * Prints an object's {@code String} representation to {@code stdout}.	 	 
	 * @param value object to print
	 * @return {@code Console} object 
	 */
	public print( nullable Object value ) => ( Console )
	{
		return print(#value);
	}
	
	/**
	 * Prints an object's {@code String} representation to {@code stdout},
	 * followed by a new line character.	 	 
	 * @param value object to print
	 * @return {@code Console} object 
	 */
	public printLine(nullable Object value) => ( Console )
	{
		return print(value).printLine();
	}
	
	public printLine(String value) => (Console)
	{
		return print(value).printLine();
	}
	
	/**
	 * Prints a {@code String} value to {@code stdout}.	 	 
	 * @param value {@code String} to print
	 * @return {@code Console} object 
	 */
	public print(String value) => (Console)
	{
		__shadowIoConsole_print(value);
		return this;
	}
	
	/**
	 * Prints a new line character to {@code stdout}.
	 * @return {@code Console} object 
	 */
	public printLine() => (Console)
	{
		__shadowIoConsole_printLine();
		return this;
	}
	
	/**
	 * Prints an object's {@code String} representation to {@code stderr}.	 	 
	 * @param value object to print
	 * @return {@code Console} object 
	 */
	public printError( nullable Object value ) => ( Console )
	{
		return printError(#value);
	}
	
	/**
	 * Prints an object's {@code String} representation to {@code stderr},
	 * followed by a new line character.	 	 
	 * @param value object to print
	 * @return {@code Console} object 
	 */
	public printErrorLine( nullable Object value ) => ( Console )
	{
		return printError(value).printErrorLine();
	}
	
	/**
	 * Prints a {@code String} value to {@code stderr}.	 	 
	 * @param value {@code String} to print
	 * @return {@code Console} object 
	 */
	public printError(String value) => (Console)
	{
		__shadowIoConsole_printError(value);
		return this;
	}
	
	/**
	 * Prints a new line character to {@code stdout}.
	 * @return {@code Console} object 
	 */
	public printErrorLine() => (Console)
	{
		__shadowIoConsole_printErrorLine();
		return this;
	}
	
	/*
	[ImportNative]
	public debugPrint(String data) => ();
	
	[ImportNative]
	public debugPrint(int data) => ();
	
	[ImportNative]
	public printAddress(Object object) => ();
	
	[ImportNative]
	public setDebug(boolean debug) => ();
	*/
	
	
	// C FRAMEWORK EXTENSIONS
	[ExportAssembly]
	private _shadowConsole_printLine(Object value) => ()
	{
		Console.printLine(value);
	}
	
	[ExportAssembly]
	private _shadowConsole_printErrorLine(Object value) => ()
	{
		Console.printErrorLine(value);
	}
}
