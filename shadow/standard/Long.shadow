/**
 * Class {@code long} contains the methods that can be called on {@code long}  
 * values.
 */
locked immutable class shadow:standard@
	Long
is Integer<long>
and	Number<double>
and	CanNegate<long>
and	CanHash
{
	/// Largest value a {@code long} can have, 9223372036854775807.
    public constant long MAX = 9223372036854775807L;
    /// Smallest value a {@code long} can have, -9223372036854775808.
    public constant long MIN = -9223372036854775808L; 

	// Methods for Integer<long>
	/**
	 * Returns the bitwise complement of the {@code long} value.
	 * @return bitwise complement 
	 */ 
	[ImportNative]
	public bitComplement() => (long);
	
	/** 
	 * Finds the result of left-shifting the bits of the {@code long} value
	 * by an unsigned amount.
	 * @param amount bits to shift
	 * @return shifted value 
	 */
	[ImportNative]
	public bitShiftLeft(uint amount) => (long);
	
	/** 
	 * Finds the result of right-shifting the bits of the {@code long} value
	 * by an unsigned amount.
	 * @param amount bits to shift
	 * @return shifted value 
	 */
	[ImportNative]
	public bitShiftRight(uint amount) => (long);
	
	/** 
	 * Finds the result of left-rotating the bits of the {@code long} value
	 * by an unsigned amount.
	 * @param amount bits to rotate
	 * @return rotated value 
	 */
	[ImportNative]
	public bitRotateLeft(uint amount) => (long);
	
	/** 
	 * Finds the result of right-rotating the bits of the {@code long} value
	 * by an unsigned amount.
	 * @param amount bits to rotate
	 * @return rotated value 
	 */
	[ImportNative]
	public bitRotateRight(uint amount) => (long);
	
	/** 
	 * Finds the result of left-shifting the bits of the {@code long} value
	 * by a signed amount which may be positive, negative, or zero.
	 * @param amount bits to shift
	 * @return shifted value 
	 */
	public bitShiftLeft(int amount) => (long)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitShiftLeft(abs), bitShiftRight(abs);
	}
	
	/** 
	 * Finds the result of right-shifting the bits of the {@code long} value
	 * by a signed amount which may be positive, negative, or zero.
	 * @param amount bits to shift
	 * @return shifted value 
	 */
	public bitShiftRight(int amount) => (long)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitShiftRight(abs), bitShiftLeft(abs);
	}
	
	/** 
	 * Finds the result of left-rotating the bits of the {@code long} value
	 * by a signed amount which may be positive, negative, or zero.
	 * @param amount bits to rotate
	 * @return rotated value 
	 */
	public bitRotateLeft(int amount) => (long)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitRotateLeft(abs), bitRotateRight(abs);
	}
	
	/** 
	 * Finds the result of right-rotating the bits of the {@code long} value
	 * by a signed amount which may be positive, negative, or zero.
	 * @param amount bits to rotate
	 * @return rotated value 
	 */
	public bitRotateRight(int amount) => (long)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitRotateRight(abs), bitRotateLeft(abs);
	}
	
	
	// Methods for Number
	
	/** 
	 * Converts the {@code long} value to a {@code byte}, which will overflow
	 * if the value is too large to be contained in a {@code byte}.
	 * @return {@code byte} value 
	 */
	[ImportNative]
	public toByte() => (byte);
	
	/** 
	 * Converts the {@code long} value to a {@code ubyte}, which will overflow
	 * if the value is too large to be contained in a {@code ubyte} and
	 * underflow if the value is negative.
	 * @return {@code ubyte} value 
	 */
	[ImportNative]
	public toUByte() => (ubyte);
	
	/** 
	 * Converts the {@code long} value to a {@code short}, which will overflow
	 * if the value is too large to be contained in a {@code short}.
	 * @return {@code short} value 
	 */
	[ImportNative]
	public toShort() => (short);
	
	/** 
	 * Converts the {@code long} value to a {@code ushort}, which will overflow
	 * if the value is too large to be contained in a {@code ushort} and
	 * underflow if the value is negative.
	 * @return {@code ushort} value 
	 */
	[ImportNative]
	public toUShort() => (ushort);
	
	/** 
	 * Converts the {@code long} value to an {@code int}, which will overflow
	 * if the value is too large to be contained in a {@code int}.
	 * @return {@code short} value 
	 */
	[ImportNative]
	public toInt() => (int);
	
	/** 
	 * Converts the {@code long} value to a {@code uint}, which will overflow
	 * if the value is too large to be contained in a {@code uint} and
	 * underflow if the value is negative.
	 * @return {@code uint} value 
	 */
	[ImportNative]
	public toUInt() => (uint);
	
	/** 
	 * Converts the {@code long} value to a {@code long}, which involves no
	 * change.
	 * @return {@code long} value 
	 */
	[ImportNative]
	public toLong() => (long);
	
	/** 
	 * Converts the {@code long} value to a {@code ulong}, which will
	 * underflow if the value is negative.
	 * @return {@code ulong} value 
	 */
	[ImportNative]
	public toULong() => (ulong);
	
	/** 
	 * Converts the {@code long} value to a {@code code}, which will
	 * underflow if the value is negative.
	 * @return {@code code} value 
	 */
	[ImportNative]
	public toCode() => (code);
	
	/** 
	 * Converts the {@code int} value to a {@code float}.
	 * @return {@code float} value 
	 */
	[ImportNative]
	public toFloat() => (float);
	
	/** 
	 * Converts the {@code int} value to a {@code double}.
	 * @return {@code double} value 
	 */
	[ImportNative]
	public toDouble() => (double);

	// Methods for Integer<long>

	/** 
	 * Computes the bitwise XOR of the value and another {@code int} value.
	 * @param other value to bitwise XOR with
	 * @return result of bitwise XOR 
	 */
	[ImportNative]
	public bitOr(long other) => (long);	
	
	/** 
	 * Computes the bitwise XOR of the value and another {@code long} value.
	 * @param other value to bitwise XOR with
	 * @return result of bitwise XOR 
	 */	
	[ImportNative]
	public bitXor(long other) => (long);
	
	/** 
	 * Computes the bitwise AND of the value and another {@code long} value.
	 * @param other value to bitwise AND with
	 * @return result of bitwise AND
	 */
	[ImportNative]
	public bitAnd(long other) => (long);
	
	// Method for CanAdd<long>
	/**
	 * Adds another {@code long} to the current value and returns the resulting value.	 
	 * @param other value to add
	 * @return sum of the two values
	 */
	[ImportNative]
	public add(long other) => (long);
	
	// Method for CanSubtract<long>
	/**
	 * Subtracts another {@code long} from the current value and returns the resulting value.	 
	 * @param other value to subtract
	 * @return difference of the two values
	 */
	[ImportNative]
	public subtract(long other) => (long);
	
	// Method for CanMultiply<long>
	/**
	 * Multiplies the current value by another {@code int} and returns the resulting value.	 
	 * @param other value to multiply by
	 * @return product of the two values
	 */
	[ImportNative]
	public multiply(long other) => (long);
	
	// Method for CanDivide<long>
	/**
	 * Divides the current value by another {@code int} and returns the quotient.	 
	 * @param other value to divide by
	 * @return quotient of the division
	 */
	[ImportNative]
	public divide(long other) => (long);
	
	// Method for CanModulus<long>
	/**
	 * Divides the current value by another {@code int} and returns the remainder.	 
	 * @param other value to divide by
	 * @return remainder of the division
	 */
	[ImportNative]
	public modulus(long other) => (long);
	
	// Method for CanCompare<long>
	/**
	 * Compares the current value to another {@code long}, returning {@code -1},
	 * {@code 0}, or {@code 1}, if the current value is smaller than, equal to,
	 * or larger than the other value, respectively.
	 * @param other value to compare to
	 * @return whether smaller, equal, or larger
	 */
	[ImportNative]
	public compare(long other) => (int);
		
	// Method for CanEqual<long>
	/**
	 * Compares the current value to another {@code long}, returning
	 * {@code true} if they represent the same number.
	 * @param other value to compare to
	 * @return {@code true} if identical
	 */
	[ImportNative]
	public equal(long other) => (boolean);

	// Method for CanAdd<double>
	/**
	 * Adds a {@code double} to the current value and returns the resulting value.	 
	 * @param other value to add
	 * @return sum of the two values
	 */
	public add(double other) => (double)
	{
		return cast<double>(this) + other;
	}
	
	// Method for CanSubtract<double>
	/**
	 * Subtracts a {@code double} from the current value and returns the resulting value.	 
	 * @param other value to subtract
	 * @return difference of the two values
	 */
	public subtract(double other) => (double)
	{
		return cast<double>(this) - other;
	}
	
	// Method for CanMultiply<double>
	/**
	 * Multiplies the current value by a {@code double} and returns the resulting value.	 
	 * @param other value to multiply by
	 * @return product of the two values
	 */
	public multiply(double other) => (double)
	{
		return cast<double>(this) * other;
	}
	
	// Method for CanDivide<double>
	/**
	 * Divides the current value by a {@code double} and returns the quotient.	 
	 * @param other value to divide by
	 * @return quotient of the division
	 */
	public divide(double other) => (double)
	{
		return cast<double>(this) / other;
	}
	
	// Method for CanModulus<double>
	/**
	 * Divides the current value by a {@code double} and returns the remainder.	 
	 * @param other value to divide by
	 * @return remainder of the division
	 */
	public modulus(double other) => (double)
	{
		return cast<double>(this) % other;
	}
	
	// Method for CanCompare<double>
	/**
	 * Compares the current value to a {@code double}, returning {@code -1},
	 * {@code 0}, or {@code 1}, if the current value is smaller than, equal to,
	 * or larger than the other value, respectively.
	 * @param other value to compare to
	 * @return whether smaller, equal, or larger
	 */
	public compare(double other) => (int)
	{
		return cast<double>(this).compare(other);
	}
	
	// Method for CanEqual<double>
	/**
	 * Compares the current value to a {@code double}, returning {@code true}
	 * if they represent the same number.
	 * @param other value to compare to
	 * @return {@code true} if identical
	 */
	public equal(double other) => (boolean)
	{
		return cast<double>(this) == other;
	}
	
	// Method for CanNegate<long>
	/** 
	 * Negates the value.
	 * @return negated value	 
	 */
	[ImportNative]
	public negate() => (long);
	
	/** 
	 * Finds the square root of the value.
	 * @return square root	 
	 */
	public squareRoot() => (double)
	{
		return toDouble().squareRoot();
	}
	
	/** 
	 * Raises the current value to the power of an {@code int}.
	 * @param exponent power to raise by	 
	 * @return number after exponentiation
	 */
	public power(int value) => (double)
	{
		return toDouble().power(value);
	}
	
	/** 
	 * Raises the current value to the power of a {@code double}.
	 * @param exponent power to raise by	 
	 * @return number after exponentiation
	 */
	public power(double value) => (double)
	{
		return toDouble().power(value);
	}
	
	/** 
	 * Finds the sine of the current value.	 	 
	 * @return sine of the value
	 */
	public sin() => (double)
	{
		return toDouble().sin();
	}
	
	/** 
	 * Finds the cosine of the current value.	 	 
	 * @return cosine of the value
	 */
	public cos() => (double)	
	{
		return toDouble().cos();
	}
	
	/** 
	 * Finds the tangent of the current value.	 	 
	 * @return tangent of the value
	 */
	public tan() => (double)
	{
		return toDouble().tan();
	}
	
	/** 
	 * Finds the natural logarithm of the current value.	 	 
	 * @return natural logarithm of the value
	 */
	public logBaseE() => (double)	
	{
		return toDouble().logBaseE();
	}
	
	/** 
	 * Finds the logarithm base 2 of the current value.	 	 
	 * @return logarithm base 2 of the value
	 */
	public logBase2() => (double)	
	{
		return toDouble().logBase2();
	}
	
	/** 
	 * Finds the logarithm base 10 of the current value.	 	 
	 * @return logarithm base 10 of the value
	 */
	public logBase10() => (double)	
	{
		return toDouble().logBase10();
	}
	
	/** 
	 * Produces a version of the value with endianness reversed. In other
	 * words, the order of the 8 bytes has been reversed.	 	 
	 * @return value with opposite endianness
	 */	 
	[ImportNative]
	public flipEndian() => (long);
	
	/** 
	 * Counts the number of 1 bits in the binary representation of the number.	 	 
	 * @return total 1 bits
	 */	
	[ImportNative]
	public ones() => (long);
	
	/** 
	 * Counts the number of 0 bits before a non-zero bit, starting with the
	 * most significant bits. 	 
	 * @return leading 0 bits
	 */
	[ImportNative]
	public leadingZeroes() => (long);
	
	/** 
	 * Counts the number of 0 bits after a non-zero bit, starting with the
	 * least significant bits. 	 
	 * @return trailing 0 bits
	 */
	[ImportNative]
	public trailingZeroes() => (long);
	
	// Method for CanHash
	/** 
	 * Finds a hash value for the current value.	 
	 * @return hash value	 
	 */
	public get hash() => (ulong)
	{
		return cast<ulong>(this);
	}

	/**
	 * Returns a non-negative version of the current value.
	 * @return non-negative value	  
	 */
	public abs() => (ulong)
	{
		return cast<ulong>(this < 0 ? -this, this);
	}
	
	/** 
	 * Finds the minimum of the current value and another {@code long}.
	 * @param other value
	 * @return minimum value	 
	 */
	public min(long other) => (long)
	{
		return this < other ? this, other;
	}
	
	/** 
	 * Finds the maximum of the current value and another {@code long}.
	 * @param other value
	 * @return maximum value	 
	 */
	public max(long other) => (long)
	{
		return this > other ? this, other;
	}
	
	/** 
	 * Finds the minimum of the current value and a {@code double}.
	 * @param other value
	 * @return minimum value	 
	 */
	public min(double other) => (double)
	{
		return this < other ? this, other;
	}
	
	/** 
	 * Finds the maximum of the current value and a {@code double}.
	 * @param other value
	 * @return maximum value	 
	 */
	public max(double other) => (double)
	{
		return this > other ? this, other;
	}

	/**
	 * Returns an unsigned version of the current value, underflowing if negative.
	 * @return unsigned value	  
	 */
	public toUnsigned() => (ulong)
	{
		return toULong();
	}
	
	/** 
	 * Returns a {@code String} representation of the value, in base 10.
	 * @return  {@code String} representation
	 */
	public toString() => (String)
	{
		return toString(10u);
	}
	
	/** 
	 * Returns a {@code String} representation of the value, in the specified base.
	 * @param base base of output representation
	 * @return  {@code String} representation
	 */
	public toString(uint base) => (String)
	{
		String string = abs().toString(base);
		return this >= 0 ? string, '-' # string;
	}
	
	// C FRAMEWORK EXTENSIONS
	[ExportAssembly]
	private _shadowLong_getClass() => (Class)
	{
		return long:class;
	}
}
